{"ast":null,"code":"var _jsxFileName = \"F:\\\\projects\\\\File-Share2\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useRoutes, BrowserRouter as Router, Navigate } from 'react-router-dom';\nimport HomePage from './pages/Home'; // Example Home page\nimport Auth from './pages/loginsignup/auth'; // Example Login/Signup page\nimport FileShare from './FileShare/FileShare'; // FileShare page\nimport UserPrompt from './FileShare/UserPrompt'; // UserPrompt page\nimport { socket } from './socket'; // Import the socket instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to track if user is logged in\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Set this to true when user successfully logs in (you can replace this with actual auth logic)\n  const handleLogin = status => {\n    setIsLoggedIn(status);\n  };\n\n  // Define the routes\n  const routes = [{\n    path: '/',\n    element: /*#__PURE__*/_jsxDEV(Auth, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 27\n    }, this)\n  },\n  // Login page\n  {\n    path: '/home',\n    element: isLoggedIn ? /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 44\n    }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 59\n    }, this)\n  },\n  // Home page\n  {\n    path: '/user-prompt',\n    element: isLoggedIn ? /*#__PURE__*/_jsxDEV(UserPrompt, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 51\n    }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 68\n    }, this)\n  },\n  // UserPrompt page\n  {\n    path: '/file-share',\n    element: isLoggedIn ? /*#__PURE__*/_jsxDEV(FileShare, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 50\n    }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 66\n    }, this)\n  } // FileShare page\n  ];\n\n  // Initialize the routes\n  const element = useRoutes(routes);\n\n  // Ensuring socket connection persists across all route changes\n  useEffect(() => {\n    if (!socket.connected) {\n      socket.connect(); // Make sure the socket connection is established once on app load\n    }\n\n    // Socket event listeners (optional)\n    socket.on('connect', () => {\n      console.log('Socket connected:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Socket disconnected');\n    });\n\n    // Cleanup socket event listeners when component unmounts\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n    };\n  }, []); // Empty array ensures this effect only runs on mount\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: element\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this); // Wrap routes in Router\n};\n_s(App, \"py7Uvwhjpnw2MTw7ekZeTgYzDj4=\", false, function () {\n  return [useRoutes];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRoutes","BrowserRouter","Router","Navigate","HomePage","Auth","FileShare","UserPrompt","socket","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","handleLogin","status","routes","path","element","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","to","connected","connect","on","console","log","id","off","children","_c","$RefreshReg$"],"sources":["F:/projects/File-Share2/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useRoutes, BrowserRouter as Router, Navigate } from 'react-router-dom';\nimport HomePage from './pages/Home';  // Example Home page\nimport Auth from './pages/loginsignup/auth';  // Example Login/Signup page\nimport FileShare from './FileShare/FileShare';  // FileShare page\nimport UserPrompt from './FileShare/UserPrompt';  // UserPrompt page\nimport { socket } from './socket';  // Import the socket instance\n\nconst App = () => {\n  // State to track if user is logged in\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Set this to true when user successfully logs in (you can replace this with actual auth logic)\n  const handleLogin = (status) => {\n    setIsLoggedIn(status);\n  };\n\n  // Define the routes\n  const routes = [\n    { path: '/', element: <Auth onLogin={handleLogin} /> },  // Login page\n    { path: '/home', element: isLoggedIn ? <HomePage /> : <Navigate to=\"/\" /> },  // Home page\n    { path: '/user-prompt', element: isLoggedIn ? <UserPrompt /> : <Navigate to=\"/\" /> },  // UserPrompt page\n    { path: '/file-share', element: isLoggedIn ? <FileShare /> : <Navigate to=\"/\" /> },  // FileShare page\n  ];\n\n  // Initialize the routes\n  const element = useRoutes(routes);\n\n  // Ensuring socket connection persists across all route changes\n  useEffect(() => {\n    if (!socket.connected) {\n      socket.connect(); // Make sure the socket connection is established once on app load\n    }\n\n    // Socket event listeners (optional)\n    socket.on('connect', () => {\n      console.log('Socket connected:', socket.id);\n    });\n\n    socket.on('disconnect', () => {\n      console.log('Socket disconnected');\n    });\n\n    // Cleanup socket event listeners when component unmounts\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n    };\n  }, []);  // Empty array ensures this effect only runs on mount\n\n  return <Router>{element}</Router>;  // Wrap routes in Router\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,aAAa,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AAC/E,OAAOC,QAAQ,MAAM,cAAc,CAAC,CAAE;AACtC,OAAOC,IAAI,MAAM,0BAA0B,CAAC,CAAE;AAC9C,OAAOC,SAAS,MAAM,uBAAuB,CAAC,CAAE;AAChD,OAAOC,UAAU,MAAM,wBAAwB,CAAC,CAAE;AAClD,SAASC,MAAM,QAAQ,UAAU,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMgB,WAAW,GAAIC,MAAM,IAAK;IAC9BF,aAAa,CAACE,MAAM,CAAC;EACvB,CAAC;;EAED;EACA,MAAMC,MAAM,GAAG,CACb;IAAEC,IAAI,EAAE,GAAG;IAAEC,OAAO,eAAET,OAAA,CAACL,IAAI;MAACe,OAAO,EAAEL;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC;EAAG;EACzD;IAAEN,IAAI,EAAE,OAAO;IAAEC,OAAO,EAAEN,UAAU,gBAAGH,OAAA,CAACN,QAAQ;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGd,OAAA,CAACP,QAAQ;MAACsB,EAAE,EAAC;IAAG;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC;EAAG;EAC9E;IAAEN,IAAI,EAAE,cAAc;IAAEC,OAAO,EAAEN,UAAU,gBAAGH,OAAA,CAACH,UAAU;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGd,OAAA,CAACP,QAAQ;MAACsB,EAAE,EAAC;IAAG;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC;EAAG;EACvF;IAAEN,IAAI,EAAE,aAAa;IAAEC,OAAO,EAAEN,UAAU,gBAAGH,OAAA,CAACJ,SAAS;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGd,OAAA,CAACP,QAAQ;MAACsB,EAAE,EAAC;IAAG;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC,CAAG;EAAA,CACtF;;EAED;EACA,MAAML,OAAO,GAAGnB,SAAS,CAACiB,MAAM,CAAC;;EAEjC;EACAnB,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,MAAM,CAACkB,SAAS,EAAE;MACrBlB,MAAM,CAACmB,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB;;IAEA;IACAnB,MAAM,CAACoB,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEtB,MAAM,CAACuB,EAAE,CAAC;IAC7C,CAAC,CAAC;IAEFvB,MAAM,CAACoB,EAAE,CAAC,YAAY,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXtB,MAAM,CAACwB,GAAG,CAAC,SAAS,CAAC;MACrBxB,MAAM,CAACwB,GAAG,CAAC,YAAY,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,oBAAOtB,OAAA,CAACR,MAAM;IAAA+B,QAAA,EAAEd;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC,CAAC,CAAE;AACtC,CAAC;AAACZ,EAAA,CA3CID,GAAG;EAAA,QAkBSX,SAAS;AAAA;AAAAkC,EAAA,GAlBrBvB,GAAG;AA6CT,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}