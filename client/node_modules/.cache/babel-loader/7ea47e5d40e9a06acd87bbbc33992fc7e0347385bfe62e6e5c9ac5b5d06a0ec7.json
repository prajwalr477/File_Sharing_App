{"ast":null,"code":"var _jsxFileName = \"F:\\\\projects\\\\file-sharing-app\\\\client\\\\src\\\\FileShare\\\\FileShare.js\",\n  _s = $RefreshSig$();\n// FileShare.js\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport './FileShare.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Server URL\n\nconst FileShare = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(new RTCPeerConnection());\n  const [dataChannel, setDataChannel] = useState(null);\n  const [status, setStatus] = useState('');\n  const [isOfferSent, setIsOfferSent] = useState(false);\n  const [receivedFile, setReceivedFile] = useState(null);\n  const CHUNK_SIZE = 16384;\n  useEffect(() => {\n    console.log(\"Setting up WebRTC peer connection and data channel...\");\n    const channel = peerConnection.createDataChannel('fileTransfer');\n    setDataChannel(channel);\n    channel.onopen = () => {\n      console.log('Data channel opened');\n      setStatus('Data channel is open.');\n    };\n    channel.onclose = () => {\n      console.log('Data channel closed');\n      setStatus('Data channel is closed.');\n    };\n    channel.onmessage = event => {\n      console.log(\"Receiving data on data channel...\");\n      if (event.data instanceof Blob) {\n        setReceivedFile(event.data);\n        setStatus('File received. Click \"Receive File\" to download.');\n        console.log(\"Received file as Blob:\", event.data);\n      } else {\n        console.warn(\"Unexpected data type:\", event.data);\n      }\n    };\n\n    // Socket event listeners for signaling\n    socket.on('offer', offer => {\n      console.log(\"Received offer:\", offer);\n      peerConnection.setRemoteDescription(new RTCSessionDescription(offer)).then(() => peerConnection.createAnswer()).then(answer => {\n        peerConnection.setLocalDescription(answer);\n        socket.emit('answer', answer);\n        console.log(\"Answer sent to the offer.\");\n      }).catch(err => console.error(\"Error handling offer:\", err));\n    });\n    socket.on('answer', answer => {\n      console.log(\"Received answer:\", answer);\n      peerConnection.setRemoteDescription(new RTCSessionDescription(answer)).catch(err => console.error(\"Error setting remote description:\", err));\n    });\n    socket.on('ice-candidate', candidate => {\n      console.log(\"Received ICE candidate:\", candidate);\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(err => console.error(\"Error adding ICE candidate:\", err));\n    });\n    peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        socket.emit('ice-candidate', event.candidate);\n        console.log(\"ICE candidate sent:\", event.candidate);\n      }\n    };\n    return () => {\n      socket.off('offer');\n      socket.off('answer');\n      socket.off('ice-candidate');\n    };\n  }, [peerConnection]);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n    setStatus('');\n    console.log(\"File selected:\", event.target.files[0]);\n  };\n  const sendFile = () => {\n    if (!file || !dataChannel) {\n      setStatus('No file selected or data channel not available.');\n      console.warn('No file selected or data channel is not available.');\n      return;\n    }\n    if (dataChannel.readyState !== 'open') {\n      setStatus('Data channel is not open yet.');\n      console.warn(\"Data channel is not open. Current state:\", dataChannel.readyState);\n      return;\n    }\n    const fileReader = new FileReader();\n    let offset = 0;\n    fileReader.onload = event => {\n      dataChannel.send(event.target.result);\n      offset += event.target.result.byteLength;\n      console.log(`Sent chunk: ${offset}/${file.size}`);\n      if (offset < file.size) {\n        sendNextChunk();\n      } else {\n        setStatus('File sent successfully!');\n        setFile(null);\n        console.log(\"File sent completely.\");\n      }\n    };\n    const sendNextChunk = () => {\n      const chunk = file.slice(offset, offset + CHUNK_SIZE);\n      fileReader.readAsArrayBuffer(chunk);\n    };\n    sendNextChunk();\n  };\n  const createOffer = () => {\n    if (isOfferSent) return;\n    peerConnection.createOffer().then(offer => {\n      peerConnection.setLocalDescription(offer);\n      socket.emit('offer', offer);\n      setIsOfferSent(true);\n      setStatus('Offer sent!');\n      console.log(\"Offer created and sent.\");\n    }).catch(err => {\n      console.error('Error creating offer:', err);\n      setStatus('Error creating offer.');\n    });\n  };\n  const handleReceiveFile = () => {\n    if (!receivedFile) {\n      setStatus('No file available to receive.');\n      console.warn('No file to receive.');\n      return;\n    }\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(receivedFile);\n    link.download = 'received_file';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    setStatus('File received successfully!');\n    console.log(\"File downloaded successfully.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-share-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Share App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendFile,\n        children: \"Send File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createOffer,\n        children: \"Create Offer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReceiveFile,\n        children: \"Receive File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"status-message\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(FileShare, \"r0VeXSlS2GsBT8eW3PnKqZef3Kc=\");\n_c = FileShare;\nexport default FileShare;\nvar _c;\n$RefreshReg$(_c, \"FileShare\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","FileShare","_s","file","setFile","peerConnection","setPeerConnection","RTCPeerConnection","dataChannel","setDataChannel","status","setStatus","isOfferSent","setIsOfferSent","receivedFile","setReceivedFile","CHUNK_SIZE","console","log","channel","createDataChannel","onopen","onclose","onmessage","event","data","Blob","warn","on","offer","setRemoteDescription","RTCSessionDescription","then","createAnswer","answer","setLocalDescription","emit","catch","err","error","candidate","addIceCandidate","RTCIceCandidate","onicecandidate","off","handleFileChange","target","files","sendFile","readyState","fileReader","FileReader","offset","onload","send","result","byteLength","size","sendNextChunk","chunk","slice","readAsArrayBuffer","createOffer","handleReceiveFile","link","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["F:/projects/file-sharing-app/client/src/FileShare/FileShare.js"],"sourcesContent":["// FileShare.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport './FileShare.css';\r\n\r\nconst socket = io('http://localhost:5000'); // Server URL\r\n\r\nconst FileShare = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [peerConnection, setPeerConnection] = useState(new RTCPeerConnection());\r\n  const [dataChannel, setDataChannel] = useState(null);\r\n  const [status, setStatus] = useState('');\r\n  const [isOfferSent, setIsOfferSent] = useState(false);\r\n  const [receivedFile, setReceivedFile] = useState(null);\r\n  const CHUNK_SIZE = 16384;\r\n\r\n  useEffect(() => {\r\n    console.log(\"Setting up WebRTC peer connection and data channel...\");\r\n\r\n    const channel = peerConnection.createDataChannel('fileTransfer');\r\n    setDataChannel(channel);\r\n\r\n    channel.onopen = () => {\r\n      console.log('Data channel opened');\r\n      setStatus('Data channel is open.');\r\n    };\r\n\r\n    channel.onclose = () => {\r\n      console.log('Data channel closed');\r\n      setStatus('Data channel is closed.');\r\n    };\r\n\r\n    channel.onmessage = (event) => {\r\n      console.log(\"Receiving data on data channel...\");\r\n      if (event.data instanceof Blob) {\r\n        setReceivedFile(event.data);\r\n        setStatus('File received. Click \"Receive File\" to download.');\r\n        console.log(\"Received file as Blob:\", event.data);\r\n      } else {\r\n        console.warn(\"Unexpected data type:\", event.data);\r\n      }\r\n    };\r\n\r\n    // Socket event listeners for signaling\r\n    socket.on('offer', (offer) => {\r\n      console.log(\"Received offer:\", offer);\r\n      peerConnection.setRemoteDescription(new RTCSessionDescription(offer))\r\n        .then(() => peerConnection.createAnswer())\r\n        .then(answer => {\r\n          peerConnection.setLocalDescription(answer);\r\n          socket.emit('answer', answer);\r\n          console.log(\"Answer sent to the offer.\");\r\n        })\r\n        .catch(err => console.error(\"Error handling offer:\", err));\r\n    });\r\n\r\n    socket.on('answer', (answer) => {\r\n      console.log(\"Received answer:\", answer);\r\n      peerConnection.setRemoteDescription(new RTCSessionDescription(answer))\r\n        .catch(err => console.error(\"Error setting remote description:\", err));\r\n    });\r\n\r\n    socket.on('ice-candidate', (candidate) => {\r\n      console.log(\"Received ICE candidate:\", candidate);\r\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate))\r\n        .catch(err => console.error(\"Error adding ICE candidate:\", err));\r\n    });\r\n\r\n    peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        socket.emit('ice-candidate', event.candidate);\r\n        console.log(\"ICE candidate sent:\", event.candidate);\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      socket.off('offer');\r\n      socket.off('answer');\r\n      socket.off('ice-candidate');\r\n    };\r\n  }, [peerConnection]);\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n    setStatus('');\r\n    console.log(\"File selected:\", event.target.files[0]);\r\n  };\r\n\r\n  const sendFile = () => {\r\n    if (!file || !dataChannel) {\r\n      setStatus('No file selected or data channel not available.');\r\n      console.warn('No file selected or data channel is not available.');\r\n      return;\r\n    }\r\n\r\n    if (dataChannel.readyState !== 'open') {\r\n      setStatus('Data channel is not open yet.');\r\n      console.warn(\"Data channel is not open. Current state:\", dataChannel.readyState);\r\n      return;\r\n    }\r\n\r\n    const fileReader = new FileReader();\r\n    let offset = 0;\r\n\r\n    fileReader.onload = (event) => {\r\n      dataChannel.send(event.target.result);\r\n      offset += event.target.result.byteLength;\r\n      console.log(`Sent chunk: ${offset}/${file.size}`);\r\n\r\n      if (offset < file.size) {\r\n        sendNextChunk();\r\n      } else {\r\n        setStatus('File sent successfully!');\r\n        setFile(null);\r\n        console.log(\"File sent completely.\");\r\n      }\r\n    };\r\n\r\n    const sendNextChunk = () => {\r\n      const chunk = file.slice(offset, offset + CHUNK_SIZE);\r\n      fileReader.readAsArrayBuffer(chunk);\r\n    };\r\n\r\n    sendNextChunk();\r\n  };\r\n\r\n  const createOffer = () => {\r\n    if (isOfferSent) return;\r\n\r\n    peerConnection.createOffer()\r\n      .then((offer) => {\r\n        peerConnection.setLocalDescription(offer);\r\n        socket.emit('offer', offer);\r\n        setIsOfferSent(true);\r\n        setStatus('Offer sent!');\r\n        console.log(\"Offer created and sent.\");\r\n      })\r\n      .catch(err => {\r\n        console.error('Error creating offer:', err);\r\n        setStatus('Error creating offer.');\r\n      });\r\n  };\r\n\r\n  const handleReceiveFile = () => {\r\n    if (!receivedFile) {\r\n      setStatus('No file available to receive.');\r\n      console.warn('No file to receive.');\r\n      return;\r\n    }\r\n\r\n    const link = document.createElement('a');\r\n    link.href = URL.createObjectURL(receivedFile);\r\n    link.download = 'received_file';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    setStatus('File received successfully!');\r\n    console.log(\"File downloaded successfully.\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"file-share-container\">\r\n      <h1>File Share App</h1>\r\n      <div className=\"file-input\">\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <button onClick={sendFile}>Send File</button>\r\n        <button onClick={createOffer}>Create Offer</button>\r\n        <button onClick={handleReceiveFile}>Receive File</button>\r\n      </div>\r\n      {status && <p className=\"status-message\">{status}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileShare;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,IAAIY,iBAAiB,CAAC,CAAC,CAAC;EAC7E,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAMqB,UAAU,GAAG,KAAK;EAExBpB,SAAS,CAAC,MAAM;IACdqB,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;IAEpE,MAAMC,OAAO,GAAGd,cAAc,CAACe,iBAAiB,CAAC,cAAc,CAAC;IAChEX,cAAc,CAACU,OAAO,CAAC;IAEvBA,OAAO,CAACE,MAAM,GAAG,MAAM;MACrBJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCP,SAAS,CAAC,uBAAuB,CAAC;IACpC,CAAC;IAEDQ,OAAO,CAACG,OAAO,GAAG,MAAM;MACtBL,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCP,SAAS,CAAC,yBAAyB,CAAC;IACtC,CAAC;IAEDQ,OAAO,CAACI,SAAS,GAAIC,KAAK,IAAK;MAC7BP,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,IAAIM,KAAK,CAACC,IAAI,YAAYC,IAAI,EAAE;QAC9BX,eAAe,CAACS,KAAK,CAACC,IAAI,CAAC;QAC3Bd,SAAS,CAAC,kDAAkD,CAAC;QAC7DM,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEM,KAAK,CAACC,IAAI,CAAC;MACnD,CAAC,MAAM;QACLR,OAAO,CAACU,IAAI,CAAC,uBAAuB,EAAEH,KAAK,CAACC,IAAI,CAAC;MACnD;IACF,CAAC;;IAED;IACAzB,MAAM,CAAC4B,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;MAC5BZ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEW,KAAK,CAAC;MACrCxB,cAAc,CAACyB,oBAAoB,CAAC,IAAIC,qBAAqB,CAACF,KAAK,CAAC,CAAC,CAClEG,IAAI,CAAC,MAAM3B,cAAc,CAAC4B,YAAY,CAAC,CAAC,CAAC,CACzCD,IAAI,CAACE,MAAM,IAAI;QACd7B,cAAc,CAAC8B,mBAAmB,CAACD,MAAM,CAAC;QAC1ClC,MAAM,CAACoC,IAAI,CAAC,QAAQ,EAAEF,MAAM,CAAC;QAC7BjB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAC1C,CAAC,CAAC,CACDmB,KAAK,CAACC,GAAG,IAAIrB,OAAO,CAACsB,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC,CAAC;IAC9D,CAAC,CAAC;IAEFtC,MAAM,CAAC4B,EAAE,CAAC,QAAQ,EAAGM,MAAM,IAAK;MAC9BjB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEgB,MAAM,CAAC;MACvC7B,cAAc,CAACyB,oBAAoB,CAAC,IAAIC,qBAAqB,CAACG,MAAM,CAAC,CAAC,CACnEG,KAAK,CAACC,GAAG,IAAIrB,OAAO,CAACsB,KAAK,CAAC,mCAAmC,EAAED,GAAG,CAAC,CAAC;IAC1E,CAAC,CAAC;IAEFtC,MAAM,CAAC4B,EAAE,CAAC,eAAe,EAAGY,SAAS,IAAK;MACxCvB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEsB,SAAS,CAAC;MACjDnC,cAAc,CAACoC,eAAe,CAAC,IAAIC,eAAe,CAACF,SAAS,CAAC,CAAC,CAC3DH,KAAK,CAACC,GAAG,IAAIrB,OAAO,CAACsB,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAAC,CAAC;IACpE,CAAC,CAAC;IAEFjC,cAAc,CAACsC,cAAc,GAAInB,KAAK,IAAK;MACzC,IAAIA,KAAK,CAACgB,SAAS,EAAE;QACnBxC,MAAM,CAACoC,IAAI,CAAC,eAAe,EAAEZ,KAAK,CAACgB,SAAS,CAAC;QAC7CvB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEM,KAAK,CAACgB,SAAS,CAAC;MACrD;IACF,CAAC;IAED,OAAO,MAAM;MACXxC,MAAM,CAAC4C,GAAG,CAAC,OAAO,CAAC;MACnB5C,MAAM,CAAC4C,GAAG,CAAC,QAAQ,CAAC;MACpB5C,MAAM,CAAC4C,GAAG,CAAC,eAAe,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,CAACvC,cAAc,CAAC,CAAC;EAEpB,MAAMwC,gBAAgB,GAAIrB,KAAK,IAAK;IAClCpB,OAAO,CAACoB,KAAK,CAACsB,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9BpC,SAAS,CAAC,EAAE,CAAC;IACbM,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEM,KAAK,CAACsB,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACtD,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAI,CAAC7C,IAAI,IAAI,CAACK,WAAW,EAAE;MACzBG,SAAS,CAAC,iDAAiD,CAAC;MAC5DM,OAAO,CAACU,IAAI,CAAC,oDAAoD,CAAC;MAClE;IACF;IAEA,IAAInB,WAAW,CAACyC,UAAU,KAAK,MAAM,EAAE;MACrCtC,SAAS,CAAC,+BAA+B,CAAC;MAC1CM,OAAO,CAACU,IAAI,CAAC,0CAA0C,EAAEnB,WAAW,CAACyC,UAAU,CAAC;MAChF;IACF;IAEA,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC;IACnC,IAAIC,MAAM,GAAG,CAAC;IAEdF,UAAU,CAACG,MAAM,GAAI7B,KAAK,IAAK;MAC7BhB,WAAW,CAAC8C,IAAI,CAAC9B,KAAK,CAACsB,MAAM,CAACS,MAAM,CAAC;MACrCH,MAAM,IAAI5B,KAAK,CAACsB,MAAM,CAACS,MAAM,CAACC,UAAU;MACxCvC,OAAO,CAACC,GAAG,CAAC,eAAekC,MAAM,IAAIjD,IAAI,CAACsD,IAAI,EAAE,CAAC;MAEjD,IAAIL,MAAM,GAAGjD,IAAI,CAACsD,IAAI,EAAE;QACtBC,aAAa,CAAC,CAAC;MACjB,CAAC,MAAM;QACL/C,SAAS,CAAC,yBAAyB,CAAC;QACpCP,OAAO,CAAC,IAAI,CAAC;QACba,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACtC;IACF,CAAC;IAED,MAAMwC,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAMC,KAAK,GAAGxD,IAAI,CAACyD,KAAK,CAACR,MAAM,EAAEA,MAAM,GAAGpC,UAAU,CAAC;MACrDkC,UAAU,CAACW,iBAAiB,CAACF,KAAK,CAAC;IACrC,CAAC;IAEDD,aAAa,CAAC,CAAC;EACjB,CAAC;EAED,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIlD,WAAW,EAAE;IAEjBP,cAAc,CAACyD,WAAW,CAAC,CAAC,CACzB9B,IAAI,CAAEH,KAAK,IAAK;MACfxB,cAAc,CAAC8B,mBAAmB,CAACN,KAAK,CAAC;MACzC7B,MAAM,CAACoC,IAAI,CAAC,OAAO,EAAEP,KAAK,CAAC;MAC3BhB,cAAc,CAAC,IAAI,CAAC;MACpBF,SAAS,CAAC,aAAa,CAAC;MACxBM,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACxC,CAAC,CAAC,CACDmB,KAAK,CAACC,GAAG,IAAI;MACZrB,OAAO,CAACsB,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;MAC3C3B,SAAS,CAAC,uBAAuB,CAAC;IACpC,CAAC,CAAC;EACN,CAAC;EAED,MAAMoD,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI,CAACjD,YAAY,EAAE;MACjBH,SAAS,CAAC,+BAA+B,CAAC;MAC1CM,OAAO,CAACU,IAAI,CAAC,qBAAqB,CAAC;MACnC;IACF;IAEA,MAAMqC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACvD,YAAY,CAAC;IAC7CkD,IAAI,CAACM,QAAQ,GAAG,eAAe;IAC/BL,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,IAAI,CAAC;IAC/BA,IAAI,CAACS,KAAK,CAAC,CAAC;IACZR,QAAQ,CAACM,IAAI,CAACG,WAAW,CAACV,IAAI,CAAC;IAC/BrD,SAAS,CAAC,6BAA6B,CAAC;IACxCM,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC;EAED,oBACEnB,OAAA;IAAK4E,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnC7E,OAAA;MAAA6E,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBjF,OAAA;MAAK4E,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB7E,OAAA;QAAOkF,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAErC;MAAiB;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjDjF,OAAA;QAAQoF,OAAO,EAAEnC,QAAS;QAAA4B,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7CjF,OAAA;QAAQoF,OAAO,EAAErB,WAAY;QAAAc,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnDjF,OAAA;QAAQoF,OAAO,EAAEpB,iBAAkB;QAAAa,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,EACLtE,MAAM,iBAAIX,OAAA;MAAG4E,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAElE;IAAM;MAAAmE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAAC9E,EAAA,CArKID,SAAS;AAAAmF,EAAA,GAATnF,SAAS;AAuKf,eAAeA,SAAS;AAAC,IAAAmF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}