{"ast":null,"code":"var _jsxFileName = \"F:\\\\projects\\\\File-Share2\\\\client\\\\src\\\\FileShare\\\\FileShare.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport './FileShare.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Server URL\n\nconst FileShare = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(new RTCPeerConnection());\n  const [dataChannel, setDataChannel] = useState(null);\n  const [status, setStatus] = useState('');\n  const [isOfferSent, setIsOfferSent] = useState(false);\n  const [receivedFileChunks, setReceivedFileChunks] = useState([]);\n  const CHUNK_SIZE = 16384;\n  const [fileMetadata, setFileMetadata] = useState(null);\n  useEffect(() => {\n    // Set up data channel if creating the offer\n    let channel;\n\n    // Handle incoming data channel\n    peerConnection.ondatachannel = event => {\n      channel = event.channel;\n      setDataChannel(channel);\n      channel.onopen = () => {\n        console.log('Data channel opened');\n        setStatus('Data channel is open.');\n      };\n      channel.onclose = () => {\n        console.log('Data channel closed');\n        setStatus('Data channel is closed.');\n      };\n      channel.onmessage = event => {\n        if (event.data instanceof ArrayBuffer) {\n          setReceivedFileChunks(prevChunks => [...prevChunks, event.data]);\n          console.log(\"Received chunk of size:\", event.data.byteLength);\n        } else {\n          console.warn(\"Unexpected data type received:\", event.data);\n        }\n      };\n    };\n\n    // Handle offer/answer and ICE candidate events from the server\n    socket.on('offer', async offer => {\n      if (peerConnection.signalingState === \"stable\") {\n        // Check signaling state\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n        const answer = await peerConnection.createAnswer();\n        await peerConnection.setLocalDescription(answer);\n        socket.emit('answer', answer);\n        console.log(\"Answer sent to the offer.\");\n      } else {\n        console.warn(\"Signaling state is not stable, cannot set offer.\");\n      }\n    });\n    socket.on('answer', answer => {\n      if (peerConnection.signalingState === \"have-local-offer\") {\n        // Check signaling state\n        peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n      } else {\n        console.warn(\"Signaling state is not 'have-local-offer', cannot set answer.\");\n      }\n    });\n    socket.on('ice-candidate', candidate => {\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        socket.emit('ice-candidate', event.candidate);\n      }\n    };\n    socket.on('file-metadata', metadata => {\n      console.log(\"Received file metadata:\", metadata); // Debugging log\n      setFileMetadata(metadata); // Store metadata on the receiver\n    });\n    return () => {\n      socket.off('offer');\n      socket.off('answer');\n      socket.off('ice-candidate');\n      socket.off('file-metadata');\n    };\n  }, [peerConnection]);\n  const handleFileChange = event => {\n    const selectedFile = event.target.files[0];\n    setFile(selectedFile);\n    const metadata = {\n      name: selectedFile.name,\n      type: selectedFile.type\n    };\n    setFileMetadata(metadata);\n    setStatus('');\n    console.log(\"Emitting file metadata:\", metadata); // Debugging log\n    socket.emit('file-metadata', metadata); // Emit metadata\n  };\n  const sendFile = () => {\n    if (!file || !dataChannel) {\n      setStatus('No file selected or data channel not available.');\n      return;\n    }\n    if (dataChannel.readyState !== 'open') {\n      setStatus('Data channel is not open yet.');\n      return;\n    }\n    const fileReader = new FileReader();\n    let offset = 0;\n    const sendNextChunk = () => {\n      const chunk = file.slice(offset, offset + CHUNK_SIZE);\n      fileReader.readAsArrayBuffer(chunk);\n    };\n    fileReader.onload = event => {\n      dataChannel.send(event.target.result);\n      offset += event.target.result.byteLength;\n      if (offset < file.size) {\n        sendNextChunk();\n      } else {\n        setStatus('File sent successfully!');\n        setFile(null);\n      }\n    };\n    sendNextChunk();\n  };\n  const createOffer = () => {\n    if (isOfferSent) return;\n    const channel = peerConnection.createDataChannel('fileTransfer');\n    setDataChannel(channel);\n    channel.onopen = () => {\n      console.log('Data channel opened');\n      setStatus('Data channel is open.');\n    };\n    channel.onclose = () => {\n      console.log('Data channel closed');\n      setStatus('Data channel is closed.');\n    };\n    channel.onmessage = event => {\n      if (event.data instanceof ArrayBuffer) {\n        setReceivedFileChunks(prevChunks => [...prevChunks, event.data]);\n        console.log(\"Received chunk of size:\", event.data.byteLength);\n      } else {\n        console.warn(\"Unexpected data type received:\", event.data);\n      }\n    };\n    peerConnection.createOffer().then(offer => {\n      peerConnection.setLocalDescription(offer);\n      socket.emit('offer', offer);\n      setIsOfferSent(true);\n      setStatus('Offer sent!');\n    }).catch(err => {\n      console.error('Error creating offer:', err);\n      setStatus('Error creating offer.');\n    });\n  };\n  const handleReceiveFile = () => {\n    if (receivedFileChunks.length === 0) {\n      setStatus('No file available to receive.');\n      return;\n    }\n    if (!fileMetadata) {\n      setStatus('No file metadata available.');\n      return;\n    }\n\n    // Create blob with received chunks and correct MIME type\n    const receivedBlob = new Blob(receivedFileChunks, {\n      type: fileMetadata.type\n    });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(receivedBlob);\n    link.download = fileMetadata.name;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    setStatus('File received successfully!');\n    setReceivedFileChunks([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-share-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Share App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendFile,\n        children: \"Send File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createOffer,\n        children: \"Create Offer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReceiveFile,\n        children: \"Receive File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"status-message\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(FileShare, \"LVBAqHAiGpdm2lcr5h6j5koHVWw=\");\n_c = FileShare;\nexport default FileShare;\nvar _c;\n$RefreshReg$(_c, \"FileShare\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","FileShare","_s","file","setFile","peerConnection","setPeerConnection","RTCPeerConnection","dataChannel","setDataChannel","status","setStatus","isOfferSent","setIsOfferSent","receivedFileChunks","setReceivedFileChunks","CHUNK_SIZE","fileMetadata","setFileMetadata","channel","ondatachannel","event","onopen","console","log","onclose","onmessage","data","ArrayBuffer","prevChunks","byteLength","warn","on","offer","signalingState","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","emit","candidate","addIceCandidate","RTCIceCandidate","onicecandidate","metadata","off","handleFileChange","selectedFile","target","files","name","type","sendFile","readyState","fileReader","FileReader","offset","sendNextChunk","chunk","slice","readAsArrayBuffer","onload","send","result","size","createOffer","createDataChannel","then","catch","err","error","handleReceiveFile","length","receivedBlob","Blob","link","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","_c","$RefreshReg$"],"sources":["F:/projects/File-Share2/client/src/FileShare/FileShare.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport './FileShare.css';\r\n\r\nconst socket = io('http://localhost:5000'); // Server URL\r\n\r\nconst FileShare = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [peerConnection, setPeerConnection] = useState(new RTCPeerConnection());\r\n  const [dataChannel, setDataChannel] = useState(null);\r\n  const [status, setStatus] = useState('');\r\n  const [isOfferSent, setIsOfferSent] = useState(false);\r\n  const [receivedFileChunks, setReceivedFileChunks] = useState([]);\r\n  const CHUNK_SIZE = 16384;\r\n\r\n  const [fileMetadata, setFileMetadata] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Set up data channel if creating the offer\r\n    let channel;\r\n\r\n    // Handle incoming data channel\r\n    peerConnection.ondatachannel = (event) => {\r\n      channel = event.channel;\r\n      setDataChannel(channel);\r\n\r\n      channel.onopen = () => {\r\n        console.log('Data channel opened');\r\n        setStatus('Data channel is open.');\r\n      };\r\n\r\n      channel.onclose = () => {\r\n        console.log('Data channel closed');\r\n        setStatus('Data channel is closed.');\r\n      };\r\n\r\n      channel.onmessage = (event) => {\r\n        if (event.data instanceof ArrayBuffer) {\r\n          setReceivedFileChunks((prevChunks) => [...prevChunks, event.data]);\r\n          console.log(\"Received chunk of size:\", event.data.byteLength);\r\n        } else {\r\n          console.warn(\"Unexpected data type received:\", event.data);\r\n        }\r\n      };\r\n    };\r\n\r\n    // Handle offer/answer and ICE candidate events from the server\r\n    socket.on('offer', async (offer) => {\r\n      if (peerConnection.signalingState === \"stable\") { // Check signaling state\r\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n        const answer = await peerConnection.createAnswer();\r\n        await peerConnection.setLocalDescription(answer);\r\n        socket.emit('answer', answer);\r\n        console.log(\"Answer sent to the offer.\");\r\n      } else {\r\n        console.warn(\"Signaling state is not stable, cannot set offer.\");\r\n      }\r\n    });\r\n\r\n    socket.on('answer', (answer) => {\r\n      if (peerConnection.signalingState === \"have-local-offer\") { // Check signaling state\r\n        peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n      } else {\r\n        console.warn(\"Signaling state is not 'have-local-offer', cannot set answer.\");\r\n      }\r\n    });\r\n\r\n\r\n    socket.on('ice-candidate', (candidate) => {\r\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n    });\r\n\r\n    peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        socket.emit('ice-candidate', event.candidate);\r\n      }\r\n    };\r\n\r\n    socket.on('file-metadata', (metadata) => {\r\n      console.log(\"Received file metadata:\", metadata); // Debugging log\r\n      setFileMetadata(metadata); // Store metadata on the receiver\r\n    });\r\n  \r\n    return () => {\r\n      socket.off('offer');\r\n      socket.off('answer');\r\n      socket.off('ice-candidate');\r\n      socket.off('file-metadata');\r\n    };\r\n  }, [peerConnection]);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    setFile(selectedFile);\r\n    const metadata = { name: selectedFile.name, type: selectedFile.type };\r\n    setFileMetadata(metadata);\r\n    setStatus('');\r\n    \r\n    console.log(\"Emitting file metadata:\", metadata); // Debugging log\r\n    socket.emit('file-metadata', metadata); // Emit metadata\r\n  };\r\n  \r\n  \r\n\r\n  const sendFile = () => {\r\n    if (!file || !dataChannel) {\r\n      setStatus('No file selected or data channel not available.');\r\n      return;\r\n    }\r\n\r\n    if (dataChannel.readyState !== 'open') {\r\n      setStatus('Data channel is not open yet.');\r\n      return;\r\n    }\r\n\r\n    const fileReader = new FileReader();\r\n    let offset = 0;\r\n\r\n    const sendNextChunk = () => {\r\n      const chunk = file.slice(offset, offset + CHUNK_SIZE);\r\n      fileReader.readAsArrayBuffer(chunk);\r\n    };\r\n\r\n    fileReader.onload = (event) => {\r\n      dataChannel.send(event.target.result);\r\n      offset += event.target.result.byteLength;\r\n\r\n      if (offset < file.size) {\r\n        sendNextChunk();\r\n      } else {\r\n        setStatus('File sent successfully!');\r\n        setFile(null);\r\n      }\r\n    };\r\n\r\n    sendNextChunk();\r\n  };\r\n\r\n  const createOffer = () => {\r\n    if (isOfferSent) return;\r\n\r\n    const channel = peerConnection.createDataChannel('fileTransfer');\r\n    setDataChannel(channel);\r\n\r\n    channel.onopen = () => {\r\n      console.log('Data channel opened');\r\n      setStatus('Data channel is open.');\r\n    };\r\n\r\n    channel.onclose = () => {\r\n      console.log('Data channel closed');\r\n      setStatus('Data channel is closed.');\r\n    };\r\n\r\n    channel.onmessage = (event) => {\r\n      if (event.data instanceof ArrayBuffer) {\r\n        setReceivedFileChunks((prevChunks) => [...prevChunks, event.data]);\r\n        console.log(\"Received chunk of size:\", event.data.byteLength);\r\n      } else {\r\n        console.warn(\"Unexpected data type received:\", event.data);\r\n      }\r\n    };\r\n\r\n    peerConnection.createOffer()\r\n      .then((offer) => {\r\n        peerConnection.setLocalDescription(offer);\r\n        socket.emit('offer', offer);\r\n        setIsOfferSent(true);\r\n        setStatus('Offer sent!');\r\n      })\r\n      .catch(err => {\r\n        console.error('Error creating offer:', err);\r\n        setStatus('Error creating offer.');\r\n      });\r\n  };\r\n\r\n  const handleReceiveFile = () => {\r\n    if (receivedFileChunks.length === 0) {\r\n      setStatus('No file available to receive.');\r\n      return;\r\n    }\r\n  \r\n    if (!fileMetadata) {\r\n      setStatus('No file metadata available.');\r\n      return;\r\n    }\r\n  \r\n    // Create blob with received chunks and correct MIME type\r\n    const receivedBlob = new Blob(receivedFileChunks, { type: fileMetadata.type });\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = URL.createObjectURL(receivedBlob);\r\n    link.download = fileMetadata.name;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  \r\n    setStatus('File received successfully!');\r\n    setReceivedFileChunks([]);\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"file-share-container\">\r\n      <h1>File Share App</h1>\r\n      <div className=\"file-input\">\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <button onClick={sendFile}>Send File</button>\r\n        <button onClick={createOffer}>Create Offer</button>\r\n        <button onClick={handleReceiveFile}>Receive File</button>\r\n      </div>\r\n      {status && <p className=\"status-message\">{status}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileShare;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}