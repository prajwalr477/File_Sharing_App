{"ast":null,"code":"var _jsxFileName = \"F:\\\\projects\\\\File-Share2\\\\client\\\\src\\\\FileShare\\\\Receiver.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport download from \"downloadjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReceiverApp = () => {\n  _s();\n  const [roomID, setRoomID] = useState(\"\");\n  const [activeScreen, setActiveScreen] = useState(\"join-screen\");\n  const [fileShare, setFileShare] = useState({\n    metadata: null,\n    transmitted: 0,\n    buffer: null,\n    // Use null until metadata is received\n    progress: 0\n  });\n  const socket = useRef(null);\n  useEffect(() => {\n    socket.current = io(\"http://localhost:5000\");\n\n    // Handle metadata reception\n    socket.current.on(\"file-meta\", metadata => {\n      console.log(`Metadata received for Room ID: ${roomID}`);\n      if (!metadata || !metadata.total_buffer_size || !metadata.filename) {\n        console.error(\"Invalid metadata received!\");\n        return;\n      }\n      setFileShare({\n        metadata,\n        transmitted: 0,\n        buffer: new Uint8Array(metadata.total_buffer_size),\n        progress: 0\n      });\n\n      // Request the first file chunk\n      socket.current.emit(\"fs-start\", {\n        uid: roomID\n      });\n    });\n\n    // Handle file chunks\n    socket.current.on(\"file-raw\", ({\n      buffer\n    }) => {\n      console.log(`Received chunk of size: ${buffer.byteLength}`);\n      const start = transmittedRef.current;\n      const end = start + buffer.byteLength;\n\n      // Prevent buffer overflow\n      if (end > fileMetadataRef.current.total_buffer_size) {\n        console.error(`Buffer overflow! Expected: ${fileMetadataRef.current.total_buffer_size}, Got: ${end}`);\n        return;\n      }\n\n      // Update the buffer in memory\n      fileBufferRef.current.set(new Uint8Array(buffer), start);\n      transmittedRef.current = end;\n      const progress = Math.trunc(transmittedRef.current / fileMetadataRef.current.total_buffer_size * 100);\n      setProgress(progress);\n      if (transmittedRef.current >= fileMetadataRef.current.total_buffer_size) {\n        console.log(\"File received completely. Downloading...\");\n        const blob = new Blob([fileBufferRef.current]);\n        download(blob, fileMetadataRef.current.filename);\n\n        // Reset references\n        transmittedRef.current = 0;\n        fileBufferRef.current = null;\n        fileMetadataRef.current = null;\n      } else {\n        socket.current.emit(\"fs-start\", {\n          uid: roomID\n        });\n      }\n    });\n    return () => {\n      socket.current.disconnect();\n    };\n  }, [roomID]);\n  const handleConnect = () => {\n    if (!roomID.trim()) return;\n    console.log(`Receiver connecting to Room ID: ${roomID}`);\n    socket.current.emit(\"receiver-join\", {\n      uid: roomID\n    });\n    setActiveScreen(\"fs-screen\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [activeScreen === \"join-screen\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen join-screen active\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Join a Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Room ID\",\n        value: roomID,\n        onChange: e => setRoomID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConnect,\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), activeScreen === \"fs-screen\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen fs-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Receiving File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), fileShare.metadata && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: fileShare.metadata.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Progress: \", fileShare.progress, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(ReceiverApp, \"znSLUTd+IjiGW3waLa8DsJGCEFE=\");\n_c = ReceiverApp;\nexport default ReceiverApp;\nvar _c;\n$RefreshReg$(_c, \"ReceiverApp\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","download","jsxDEV","_jsxDEV","ReceiverApp","_s","roomID","setRoomID","activeScreen","setActiveScreen","fileShare","setFileShare","metadata","transmitted","buffer","progress","socket","current","on","console","log","total_buffer_size","filename","error","Uint8Array","emit","uid","byteLength","start","transmittedRef","end","fileMetadataRef","fileBufferRef","set","Math","trunc","setProgress","blob","Blob","disconnect","handleConnect","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["F:/projects/File-Share2/client/src/FileShare/Receiver.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport download from \"downloadjs\";\r\n\r\nconst ReceiverApp = () => {\r\n  const [roomID, setRoomID] = useState(\"\");\r\n  const [activeScreen, setActiveScreen] = useState(\"join-screen\");\r\n  const [fileShare, setFileShare] = useState({\r\n    metadata: null,\r\n    transmitted: 0,\r\n    buffer: null, // Use null until metadata is received\r\n    progress: 0,\r\n  });\r\n\r\n  const socket = useRef(null);\r\n\r\n  useEffect(() => {\r\n    socket.current = io(\"http://localhost:5000\");\r\n\r\n    // Handle metadata reception\r\n    socket.current.on(\"file-meta\", (metadata) => {\r\n      console.log(`Metadata received for Room ID: ${roomID}`);\r\n    \r\n      if (!metadata || !metadata.total_buffer_size || !metadata.filename) {\r\n        console.error(\"Invalid metadata received!\");\r\n        return;\r\n      }\r\n    \r\n      setFileShare({\r\n        metadata,\r\n        transmitted: 0,\r\n        buffer: new Uint8Array(metadata.total_buffer_size),\r\n        progress: 0,\r\n      });\r\n    \r\n      // Request the first file chunk\r\n      socket.current.emit(\"fs-start\", { uid: roomID });\r\n    });\r\n    \r\n\r\n    // Handle file chunks\r\n    socket.current.on(\"file-raw\", ({ buffer }) => {\r\n      console.log(`Received chunk of size: ${buffer.byteLength}`);\r\n    \r\n      const start = transmittedRef.current;\r\n      const end = start + buffer.byteLength;\r\n    \r\n      // Prevent buffer overflow\r\n      if (end > fileMetadataRef.current.total_buffer_size) {\r\n        console.error(\r\n          `Buffer overflow! Expected: ${fileMetadataRef.current.total_buffer_size}, Got: ${end}`\r\n        );\r\n        return;\r\n      }\r\n    \r\n      // Update the buffer in memory\r\n      fileBufferRef.current.set(new Uint8Array(buffer), start);\r\n      transmittedRef.current = end;\r\n    \r\n      const progress = Math.trunc(\r\n        (transmittedRef.current / fileMetadataRef.current.total_buffer_size) * 100\r\n      );\r\n      setProgress(progress);\r\n    \r\n      if (transmittedRef.current >= fileMetadataRef.current.total_buffer_size) {\r\n        console.log(\"File received completely. Downloading...\");\r\n        const blob = new Blob([fileBufferRef.current]);\r\n        download(blob, fileMetadataRef.current.filename);\r\n    \r\n        // Reset references\r\n        transmittedRef.current = 0;\r\n        fileBufferRef.current = null;\r\n        fileMetadataRef.current = null;\r\n      } else {\r\n        socket.current.emit(\"fs-start\", { uid: roomID });\r\n      }\r\n    });    \r\n\r\n\r\n\r\n    return () => {\r\n      socket.current.disconnect();\r\n    };\r\n  }, [roomID]);\r\n\r\n  const handleConnect = () => {\r\n    if (!roomID.trim()) return;\r\n    console.log(`Receiver connecting to Room ID: ${roomID}`);\r\n    socket.current.emit(\"receiver-join\", { uid: roomID });\r\n    setActiveScreen(\"fs-screen\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {activeScreen === \"join-screen\" && (\r\n        <div className=\"screen join-screen active\">\r\n          <h2>Join a Room</h2>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Room ID\"\r\n            value={roomID}\r\n            onChange={(e) => setRoomID(e.target.value)}\r\n          />\r\n          <button onClick={handleConnect}>Join</button>\r\n        </div>\r\n      )}\r\n\r\n      {activeScreen === \"fs-screen\" && (\r\n        <div className=\"screen fs-screen\">\r\n          <h2>Receiving File</h2>\r\n          {fileShare.metadata && (\r\n            <div>\r\n              <p>{fileShare.metadata.filename}</p>\r\n              <p>Progress: {fileShare.progress}%</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReceiverApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}