{"ast":null,"code":"var _jsxFileName = \"F:\\\\projects\\\\File-Share2\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useRoutes } from 'react-router-dom';\nimport HomePage from './pages/Home'; // Example Home page\nimport Auth from './pages/loginsignup/auth'; // Example Login/Signup page\nimport FileShare from './FileShare/FileShare'; // FileShare page\nimport UserPrompt from './FileShare/UserPrompt'; // UserPrompt page (import it here)\nimport { socket } from './socket'; // Import the socket instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Define the routes\n  const routes = [{\n    path: '/',\n    element: /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 27\n    }, this)\n  },\n  // Login page\n  {\n    path: '/home',\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 31\n    }, this)\n  },\n  // Home page\n  {\n    path: '/user-prompt',\n    element: /*#__PURE__*/_jsxDEV(UserPrompt, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 38\n    }, this)\n  },\n  // UserPrompt page\n  {\n    path: '/file-share',\n    element: /*#__PURE__*/_jsxDEV(FileShare, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 37\n    }, this)\n  } // FileShare page\n  ];\n\n  // Initialize the routes\n  const element = useRoutes(routes);\n\n  // Ensuring socket connection persists across all route changes\n  useEffect(() => {\n    if (!socket.connected) {\n      socket.connect(); // Make sure the socket connection is established once on app load\n    }\n\n    // Socket event listeners (optional)\n    socket.on('connect', () => {\n      console.log('Socket connected:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Socket disconnected');\n    });\n\n    // Cleanup socket event listeners when component unmounts\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n    };\n  }, []); // Empty array ensures this effect only runs on mount\n\n  return element; // Return the routes element\n};\n_s(App, \"orbGChUil7f6JLSMjyD8lkZskF4=\", false, function () {\n  return [useRoutes];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRoutes","HomePage","Auth","FileShare","UserPrompt","socket","jsxDEV","_jsxDEV","App","_s","routes","path","element","fileName","_jsxFileName","lineNumber","columnNumber","connected","connect","on","console","log","id","off","_c","$RefreshReg$"],"sources":["F:/projects/File-Share2/client/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useRoutes } from 'react-router-dom';\nimport HomePage from './pages/Home';  // Example Home page\nimport Auth from './pages/loginsignup/auth';  // Example Login/Signup page\nimport FileShare from './FileShare/FileShare';  // FileShare page\nimport UserPrompt from './FileShare/UserPrompt';  // UserPrompt page (import it here)\nimport { socket } from './socket';  // Import the socket instance\n\nconst App = () => {\n  // Define the routes\n  const routes = [\n    { path: '/', element: <Auth /> },  // Login page\n    { path: '/home', element: <HomePage /> },  // Home page\n    { path: '/user-prompt', element: <UserPrompt /> },  // UserPrompt page\n    { path: '/file-share', element: <FileShare /> },  // FileShare page\n  ];\n\n  // Initialize the routes\n  const element = useRoutes(routes);\n\n  // Ensuring socket connection persists across all route changes\n  useEffect(() => {\n    if (!socket.connected) {\n      socket.connect(); // Make sure the socket connection is established once on app load\n    }\n\n    // Socket event listeners (optional)\n    socket.on('connect', () => {\n      console.log('Socket connected:', socket.id);\n    });\n\n    socket.on('disconnect', () => {\n      console.log('Socket disconnected');\n    });\n\n    // Cleanup socket event listeners when component unmounts\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n    };\n  }, []);  // Empty array ensures this effect only runs on mount\n\n  return element;  // Return the routes element\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,QAAQ,MAAM,cAAc,CAAC,CAAE;AACtC,OAAOC,IAAI,MAAM,0BAA0B,CAAC,CAAE;AAC9C,OAAOC,SAAS,MAAM,uBAAuB,CAAC,CAAE;AAChD,OAAOC,UAAU,MAAM,wBAAwB,CAAC,CAAE;AAClD,SAASC,MAAM,QAAQ,UAAU,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAMC,MAAM,GAAG,CACb;IAAEC,IAAI,EAAE,GAAG;IAAEC,OAAO,eAAEL,OAAA,CAACL,IAAI;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC;EAAG;EACnC;IAAEL,IAAI,EAAE,OAAO;IAAEC,OAAO,eAAEL,OAAA,CAACN,QAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC;EAAG;EAC3C;IAAEL,IAAI,EAAE,cAAc;IAAEC,OAAO,eAAEL,OAAA,CAACH,UAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC;EAAG;EACpD;IAAEL,IAAI,EAAE,aAAa;IAAEC,OAAO,eAAEL,OAAA,CAACJ,SAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC,CAAG;EAAA,CACnD;;EAED;EACA,MAAMJ,OAAO,GAAGZ,SAAS,CAACU,MAAM,CAAC;;EAEjC;EACAX,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,MAAM,CAACY,SAAS,EAAE;MACrBZ,MAAM,CAACa,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB;;IAEA;IACAb,MAAM,CAACc,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEhB,MAAM,CAACiB,EAAE,CAAC;IAC7C,CAAC,CAAC;IAEFjB,MAAM,CAACc,EAAE,CAAC,YAAY,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXhB,MAAM,CAACkB,GAAG,CAAC,SAAS,CAAC;MACrBlB,MAAM,CAACkB,GAAG,CAAC,YAAY,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,OAAOX,OAAO,CAAC,CAAE;AACnB,CAAC;AAACH,EAAA,CAnCID,GAAG;EAAA,QAUSR,SAAS;AAAA;AAAAwB,EAAA,GAVrBhB,GAAG;AAqCT,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}