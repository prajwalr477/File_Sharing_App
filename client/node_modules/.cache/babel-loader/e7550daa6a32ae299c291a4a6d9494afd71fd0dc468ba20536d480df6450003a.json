{"ast":null,"code":"io.on('connection', socket => {\n  console.log(`Client connected: ${socket.id}`);\n\n  // Handle connect-request from client\n  socket.on('connect-request', ({\n    username\n  }) => {\n    // Check if the user is online (you can use a simple check, or query a database if you prefer)\n    const targetUserSocket = findUserSocketByUsername(username); // Implement this function to get the user's socket by username\n\n    if (targetUserSocket) {\n      // If the user is online, emit a message to them\n      targetUserSocket.emit('user-status', 'request-accepted');\n    } else {\n      // If the user is not online, inform the requester\n      socket.emit('user-status', 'offline');\n    }\n  });\n\n  // Helper function to find user's socket by username\n  const findUserSocketByUsername = username => {\n    // Example logic to find the socket id based on the username (you can implement a better way to track users)\n    const userSockets = io.sockets.sockets;\n    for (let socketId in userSockets) {\n      let userSocket = userSockets[socketId];\n      if (userSocket.username === username) {\n        return userSocket;\n      }\n    }\n    return null; // If no socket is found for the username\n  };\n  socket.on('disconnect', () => {\n    console.log(`Client disconnected: ${socket.id}`);\n  });\n});","map":{"version":3,"names":["io","on","socket","console","log","id","username","targetUserSocket","findUserSocketByUsername","emit","userSockets","sockets","socketId","userSocket"],"sources":["F:/projects/File-Share2/client/src/socket.js"],"sourcesContent":["io.on('connection', (socket) => {\r\n    console.log(`Client connected: ${socket.id}`);\r\n  \r\n    // Handle connect-request from client\r\n    socket.on('connect-request', ({ username }) => {\r\n      // Check if the user is online (you can use a simple check, or query a database if you prefer)\r\n      const targetUserSocket = findUserSocketByUsername(username); // Implement this function to get the user's socket by username\r\n  \r\n      if (targetUserSocket) {\r\n        // If the user is online, emit a message to them\r\n        targetUserSocket.emit('user-status', 'request-accepted');\r\n      } else {\r\n        // If the user is not online, inform the requester\r\n        socket.emit('user-status', 'offline');\r\n      }\r\n    });\r\n  \r\n    // Helper function to find user's socket by username\r\n    const findUserSocketByUsername = (username) => {\r\n      // Example logic to find the socket id based on the username (you can implement a better way to track users)\r\n      const userSockets = io.sockets.sockets;\r\n      for (let socketId in userSockets) {\r\n        let userSocket = userSockets[socketId];\r\n        if (userSocket.username === username) {\r\n          return userSocket;\r\n        }\r\n      }\r\n      return null;  // If no socket is found for the username\r\n    };\r\n  \r\n    socket.on('disconnect', () => {\r\n      console.log(`Client disconnected: ${socket.id}`);\r\n    });\r\n  });\r\n  "],"mappings":"AAAAA,EAAE,CAACC,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqBF,MAAM,CAACG,EAAE,EAAE,CAAC;;EAE7C;EACAH,MAAM,CAACD,EAAE,CAAC,iBAAiB,EAAE,CAAC;IAAEK;EAAS,CAAC,KAAK;IAC7C;IACA,MAAMC,gBAAgB,GAAGC,wBAAwB,CAACF,QAAQ,CAAC,CAAC,CAAC;;IAE7D,IAAIC,gBAAgB,EAAE;MACpB;MACAA,gBAAgB,CAACE,IAAI,CAAC,aAAa,EAAE,kBAAkB,CAAC;IAC1D,CAAC,MAAM;MACL;MACAP,MAAM,CAACO,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC;IACvC;EACF,CAAC,CAAC;;EAEF;EACA,MAAMD,wBAAwB,GAAIF,QAAQ,IAAK;IAC7C;IACA,MAAMI,WAAW,GAAGV,EAAE,CAACW,OAAO,CAACA,OAAO;IACtC,KAAK,IAAIC,QAAQ,IAAIF,WAAW,EAAE;MAChC,IAAIG,UAAU,GAAGH,WAAW,CAACE,QAAQ,CAAC;MACtC,IAAIC,UAAU,CAACP,QAAQ,KAAKA,QAAQ,EAAE;QACpC,OAAOO,UAAU;MACnB;IACF;IACA,OAAO,IAAI,CAAC,CAAE;EAChB,CAAC;EAEDX,MAAM,CAACD,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BE,OAAO,CAACC,GAAG,CAAC,wBAAwBF,MAAM,CAACG,EAAE,EAAE,CAAC;EAClD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}