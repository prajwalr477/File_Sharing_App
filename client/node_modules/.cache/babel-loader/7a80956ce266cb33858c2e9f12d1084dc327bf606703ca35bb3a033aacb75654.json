{"ast":null,"code":"var _jsxFileName = \"F:\\\\projects\\\\File-Share2\\\\client\\\\src\\\\FileShare\\\\FileShare.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport './FileShare.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst serverURL = process.env.NODE_ENV === 'production' ? window.location.origin // Use the deployed website's origin in production\n: 'http://localhost:5000'; // Localhost for development\nconst socket = io(serverURL);\nconst FileShare = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [targetUser, setTargetUser] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [file, setFile] = useState(null);\n  const [status, setStatus] = useState('');\n  const [dataChannel, setDataChannel] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(new RTCPeerConnection());\n  const [receivedFileChunks, setReceivedFileChunks] = useState([]);\n  const [fileMetadata, setFileMetadata] = useState(null);\n  const [showConnectionPopup, setShowConnectionPopup] = useState(false);\n  const [connectionRequestSender, setConnectionRequestSender] = useState('');\n  const CHUNK_SIZE = 16384;\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to server.');\n      setStatus('Connected to server.');\n    });\n    socket.on('connection-request', ({\n      fromUsername\n    }) => {\n      setConnectionRequestSender(fromUsername);\n      setShowConnectionPopup(true);\n      setStatus(`Connection request received from ${fromUsername}.`);\n    });\n    socket.on('connection-approved', ({\n      message\n    }) => {\n      setStatus(message);\n      setIsConnected(true);\n    });\n    socket.on('connection-denied', ({\n      message\n    }) => {\n      setStatus(message);\n    });\n    socket.on('startDataChannel', () => {\n      setStatus('Data channel established. Ready for file transfer!');\n      setIsConnected(true);\n      setShowConnectionPopup(false);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('connection-request');\n      socket.off('connection-approved');\n      socket.off('connection-denied');\n      socket.off('startDataChannel');\n    };\n  }, []);\n  const handleUsernameSubmit = async () => {\n    const response = await fetch(`${serverURL}/validate-user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username\n      })\n    });\n    const result = await response.json();\n    if (result.message) {\n      socket.emit('register-user', username);\n      setStatus('User registered successfully.');\n    } else {\n      setStatus(result.error || 'Failed to validate user.');\n    }\n  };\n  const handleConnectionRequest = () => {\n    if (targetUser.trim() === '') {\n      setStatus('Target username cannot be empty.');\n      return;\n    }\n    socket.emit('connection-request', {\n      toUsername: targetUser,\n      fromUsername: username\n    });\n    setStatus(`Connection request sent to ${targetUser}.`);\n  };\n  const createOffer = async () => {\n    if (!file) {\n      setStatus('Please select a file to share.');\n      return;\n    }\n    const channel = peerConnection.createDataChannel('fileTransfer');\n    setDataChannel(channel);\n    const offer = await peerConnection.createOffer();\n    await peerConnection.setLocalDescription(offer);\n    socket.emit('offer', {\n      offer,\n      toUsername: targetUser\n    });\n    setStatus('Offer sent to initiate file transfer.');\n  };\n  const acceptConnection = () => {\n    socket.emit('connection-response', {\n      toUsername: connectionRequestSender,\n      accepted: true\n    });\n    setStatus('Connection request accepted.');\n    setShowConnectionPopup(false);\n  };\n  const rejectConnection = () => {\n    socket.emit('connection-response', {\n      toUsername: connectionRequestSender,\n      accepted: false\n    });\n    setStatus('Connection request rejected.');\n    setShowConnectionPopup(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-share-container\",\n    children: [!isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"username-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUsernameSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"File Share App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter target username\",\n          value: targetUser,\n          onChange: e => setTargetUser(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleConnectionRequest,\n          children: \"Send Connection Request\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setFile(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createOffer,\n          children: \"Send File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true), showConnectionPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [connectionRequestSender, \" wants to connect.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: acceptConnection,\n        children: \"Accept\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: rejectConnection,\n        children: \"Reject\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(FileShare, \"+hJBfU8UQu6PvkouJqqBQb/4ZlI=\");\n_c = FileShare;\nexport default FileShare;\nvar _c;\n$RefreshReg$(_c, \"FileShare\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","Fragment","_Fragment","serverURL","process","env","NODE_ENV","window","location","origin","socket","FileShare","_s","username","setUsername","targetUser","setTargetUser","isConnected","setIsConnected","file","setFile","status","setStatus","dataChannel","setDataChannel","peerConnection","setPeerConnection","RTCPeerConnection","receivedFileChunks","setReceivedFileChunks","fileMetadata","setFileMetadata","showConnectionPopup","setShowConnectionPopup","connectionRequestSender","setConnectionRequestSender","CHUNK_SIZE","on","console","log","fromUsername","message","off","handleUsernameSubmit","response","fetch","method","headers","body","JSON","stringify","result","json","emit","error","handleConnectionRequest","trim","toUsername","createOffer","channel","createDataChannel","offer","setLocalDescription","acceptConnection","accepted","rejectConnection","className","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","files","_c","$RefreshReg$"],"sources":["F:/projects/File-Share2/client/src/FileShare/FileShare.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport './FileShare.css';\r\n\r\nconst serverURL =\r\n  process.env.NODE_ENV === 'production'\r\n    ? window.location.origin // Use the deployed website's origin in production\r\n    : 'http://localhost:5000'; // Localhost for development\r\nconst socket = io(serverURL);\r\n\r\nconst FileShare = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [targetUser, setTargetUser] = useState('');\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [file, setFile] = useState(null);\r\n  const [status, setStatus] = useState('');\r\n  const [dataChannel, setDataChannel] = useState(null);\r\n  const [peerConnection, setPeerConnection] = useState(new RTCPeerConnection());\r\n  const [receivedFileChunks, setReceivedFileChunks] = useState([]);\r\n  const [fileMetadata, setFileMetadata] = useState(null);\r\n  const [showConnectionPopup, setShowConnectionPopup] = useState(false);\r\n  const [connectionRequestSender, setConnectionRequestSender] = useState('');\r\n  const CHUNK_SIZE = 16384;\r\n\r\n  useEffect(() => {\r\n    socket.on('connect', () => {\r\n      console.log('Connected to server.');\r\n      setStatus('Connected to server.');\r\n    });\r\n\r\n    socket.on('connection-request', ({ fromUsername }) => {\r\n      setConnectionRequestSender(fromUsername);\r\n      setShowConnectionPopup(true);\r\n      setStatus(`Connection request received from ${fromUsername}.`);\r\n    });\r\n\r\n    socket.on('connection-approved', ({ message }) => {\r\n      setStatus(message);\r\n      setIsConnected(true);\r\n    });\r\n\r\n    socket.on('connection-denied', ({ message }) => {\r\n      setStatus(message);\r\n    });\r\n\r\n    socket.on('startDataChannel', () => {\r\n      setStatus('Data channel established. Ready for file transfer!');\r\n      setIsConnected(true);\r\n      setShowConnectionPopup(false);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('connection-request');\r\n      socket.off('connection-approved');\r\n      socket.off('connection-denied');\r\n      socket.off('startDataChannel');\r\n    };\r\n  }, []);\r\n\r\n  const handleUsernameSubmit = async () => {\r\n    const response = await fetch(`${serverURL}/validate-user`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username }),\r\n    });\r\n    const result = await response.json();\r\n\r\n    if (result.message) {\r\n      socket.emit('register-user', username);\r\n      setStatus('User registered successfully.');\r\n    } else {\r\n      setStatus(result.error || 'Failed to validate user.');\r\n    }\r\n  };\r\n\r\n  const handleConnectionRequest = () => {\r\n    if (targetUser.trim() === '') {\r\n      setStatus('Target username cannot be empty.');\r\n      return;\r\n    }\r\n    socket.emit('connection-request', { toUsername: targetUser, fromUsername: username });\r\n    setStatus(`Connection request sent to ${targetUser}.`);\r\n  };\r\n\r\n  const createOffer = async () => {\r\n    if (!file) {\r\n      setStatus('Please select a file to share.');\r\n      return;\r\n    }\r\n\r\n    const channel = peerConnection.createDataChannel('fileTransfer');\r\n    setDataChannel(channel);\r\n\r\n    const offer = await peerConnection.createOffer();\r\n    await peerConnection.setLocalDescription(offer);\r\n\r\n    socket.emit('offer', { offer, toUsername: targetUser });\r\n    setStatus('Offer sent to initiate file transfer.');\r\n  };\r\n\r\n  const acceptConnection = () => {\r\n    socket.emit('connection-response', { toUsername: connectionRequestSender, accepted: true });\r\n    setStatus('Connection request accepted.');\r\n    setShowConnectionPopup(false);\r\n  };\r\n\r\n  const rejectConnection = () => {\r\n    socket.emit('connection-response', { toUsername: connectionRequestSender, accepted: false });\r\n    setStatus('Connection request rejected.');\r\n    setShowConnectionPopup(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"file-share-container\">\r\n      {!isConnected ? (\r\n        <div className=\"username-modal\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n          <button onClick={handleUsernameSubmit}>Submit</button>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h1>File Share App</h1>\r\n          <div className=\"file-input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter target username\"\r\n              value={targetUser}\r\n              onChange={(e) => setTargetUser(e.target.value)}\r\n            />\r\n            <button onClick={handleConnectionRequest}>Send Connection Request</button>\r\n          </div>\r\n          <div className=\"file-input\">\r\n            <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\r\n            <button onClick={createOffer}>Send File</button>\r\n          </div>\r\n          {status && <p className=\"status-message\">{status}</p>}\r\n        </>\r\n      )}\r\n\r\n      {showConnectionPopup && (\r\n        <div className=\"connection-popup\">\r\n          <p>{connectionRequestSender} wants to connect.</p>\r\n          <button onClick={acceptConnection}>Accept</button>\r\n          <button onClick={rejectConnection}>Reject</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileShare;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}