{"ast":null,"code":"var _jsxFileName = \"F:\\\\projects\\\\File-Share2\\\\client\\\\src\\\\FileShare\\\\FileShare.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport './FileShare.css';\n\n// Ensure socket is initialized globally to avoid duplication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Replace with your server URL\n\nconst FileShare = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [peerConnection] = useState(new RTCPeerConnection());\n  const [dataChannel, setDataChannel] = useState(null);\n  const [status, setStatus] = useState('');\n  const [isOfferSent, setIsOfferSent] = useState(false);\n  const [receivedFileChunks, setReceivedFileChunks] = useState([]);\n  const [fileMetadata, setFileMetadata] = useState(null);\n  const CHUNK_SIZE = 16384;\n  useEffect(() => {\n    // Set up the data channel and signaling handlers\n\n    peerConnection.ondatachannel = event => {\n      const channel = event.channel;\n      setDataChannel(channel);\n      channel.onopen = () => setStatus('Data channel is open.');\n      channel.onclose = () => setStatus('Data channel is closed.');\n      channel.onmessage = event => {\n        if (event.data instanceof ArrayBuffer) {\n          setReceivedFileChunks(prevChunks => [...prevChunks, event.data]);\n        }\n      };\n    };\n\n    // Handle signaling events\n    socket.on('offer', async offer => {\n      await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n      const answer = await peerConnection.createAnswer();\n      await peerConnection.setLocalDescription(answer);\n      socket.emit('answer', answer);\n    });\n    socket.on('answer', answer => {\n      peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n    });\n    socket.on('ice-candidate', candidate => {\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    peerConnection.onicecandidate = event => {\n      if (event.candidate) socket.emit('ice-candidate', event.candidate);\n    };\n    return () => {\n      socket.off('offer');\n      socket.off('answer');\n      socket.off('ice-candidate');\n    };\n  }, [peerConnection]);\n  const handleFileChange = event => {\n    const selectedFile = event.target.files[0];\n    setFile(selectedFile);\n    const metadata = {\n      name: selectedFile.name,\n      type: selectedFile.type\n    };\n    socket.emit('file-metadata', metadata);\n  };\n  const sendFile = () => {\n    if (!file || !dataChannel || dataChannel.readyState !== 'open') {\n      setStatus('No file or data channel not ready.');\n      return;\n    }\n    const fileReader = new FileReader();\n    let offset = 0;\n    fileReader.onload = event => {\n      dataChannel.send(event.target.result);\n      offset += event.target.result.byteLength;\n      if (offset < file.size) fileReader.readAsArrayBuffer(file.slice(offset, offset + CHUNK_SIZE));else setStatus('File sent successfully!');\n    };\n    fileReader.readAsArrayBuffer(file.slice(offset, offset + CHUNK_SIZE));\n  };\n  const createOffer = () => {\n    if (isOfferSent) return;\n    const channel = peerConnection.createDataChannel('fileTransfer');\n    setDataChannel(channel);\n    channel.onopen = () => setStatus('Data channel is open.');\n    channel.onclose = () => setStatus('Data channel is closed.');\n    peerConnection.createOffer().then(offer => {\n      peerConnection.setLocalDescription(offer);\n      socket.emit('offer', offer);\n      setIsOfferSent(true);\n      setStatus('Offer sent!');\n    });\n  };\n  const handleReceiveFile = () => {\n    if (receivedFileChunks.length === 0) return setStatus('No file chunks received.');\n    const receivedBlob = new Blob(receivedFileChunks, {\n      type: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.type\n    });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(receivedBlob);\n    link.download = (fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.name) || 'downloaded_file';\n    link.click();\n    setReceivedFileChunks([]);\n    setStatus('File downloaded.');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-share-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Sharing App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendFile,\n      children: \"Send File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createOffer,\n      children: \"Create Offer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReceiveFile,\n      children: \"Download File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(FileShare, \"f9YtXmLvQiD6h0iAvpVXNca3tCY=\");\n_c = FileShare;\nexport default FileShare;\nvar _c;\n$RefreshReg$(_c, \"FileShare\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","FileShare","_s","file","setFile","peerConnection","RTCPeerConnection","dataChannel","setDataChannel","status","setStatus","isOfferSent","setIsOfferSent","receivedFileChunks","setReceivedFileChunks","fileMetadata","setFileMetadata","CHUNK_SIZE","ondatachannel","event","channel","onopen","onclose","onmessage","data","ArrayBuffer","prevChunks","on","offer","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","emit","candidate","addIceCandidate","RTCIceCandidate","onicecandidate","off","handleFileChange","selectedFile","target","files","metadata","name","type","sendFile","readyState","fileReader","FileReader","offset","onload","send","result","byteLength","size","readAsArrayBuffer","slice","createOffer","createDataChannel","then","handleReceiveFile","length","receivedBlob","Blob","link","document","createElement","href","URL","createObjectURL","download","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","_c","$RefreshReg$"],"sources":["F:/projects/File-Share2/client/src/FileShare/FileShare.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport './FileShare.css';\r\n\r\n// Ensure socket is initialized globally to avoid duplication\r\nconst socket = io('http://localhost:5000'); // Replace with your server URL\r\n\r\nconst FileShare = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [peerConnection] = useState(new RTCPeerConnection());\r\n  const [dataChannel, setDataChannel] = useState(null);\r\n  const [status, setStatus] = useState('');\r\n  const [isOfferSent, setIsOfferSent] = useState(false);\r\n  const [receivedFileChunks, setReceivedFileChunks] = useState([]);\r\n  const [fileMetadata, setFileMetadata] = useState(null);\r\n\r\n  const CHUNK_SIZE = 16384;\r\n\r\n  useEffect(() => {\r\n    // Set up the data channel and signaling handlers\r\n\r\n    peerConnection.ondatachannel = (event) => {\r\n      const channel = event.channel;\r\n      setDataChannel(channel);\r\n\r\n      channel.onopen = () => setStatus('Data channel is open.');\r\n      channel.onclose = () => setStatus('Data channel is closed.');\r\n      channel.onmessage = (event) => {\r\n        if (event.data instanceof ArrayBuffer) {\r\n          setReceivedFileChunks((prevChunks) => [...prevChunks, event.data]);\r\n        }\r\n      };\r\n    };\r\n\r\n    // Handle signaling events\r\n    socket.on('offer', async (offer) => {\r\n      await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n      const answer = await peerConnection.createAnswer();\r\n      await peerConnection.setLocalDescription(answer);\r\n      socket.emit('answer', answer);\r\n    });\r\n\r\n    socket.on('answer', (answer) => {\r\n      peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n    });\r\n\r\n    socket.on('ice-candidate', (candidate) => {\r\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n    });\r\n\r\n    peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate) socket.emit('ice-candidate', event.candidate);\r\n    };\r\n\r\n    return () => {\r\n      socket.off('offer');\r\n      socket.off('answer');\r\n      socket.off('ice-candidate');\r\n    };\r\n  }, [peerConnection]);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    setFile(selectedFile);\r\n\r\n    const metadata = { name: selectedFile.name, type: selectedFile.type };\r\n    socket.emit('file-metadata', metadata);\r\n  };\r\n\r\n  const sendFile = () => {\r\n    if (!file || !dataChannel || dataChannel.readyState !== 'open') {\r\n      setStatus('No file or data channel not ready.');\r\n      return;\r\n    }\r\n\r\n    const fileReader = new FileReader();\r\n    let offset = 0;\r\n\r\n    fileReader.onload = (event) => {\r\n      dataChannel.send(event.target.result);\r\n      offset += event.target.result.byteLength;\r\n\r\n      if (offset < file.size) fileReader.readAsArrayBuffer(file.slice(offset, offset + CHUNK_SIZE));\r\n      else setStatus('File sent successfully!');\r\n    };\r\n\r\n    fileReader.readAsArrayBuffer(file.slice(offset, offset + CHUNK_SIZE));\r\n  };\r\n\r\n  const createOffer = () => {\r\n    if (isOfferSent) return;\r\n\r\n    const channel = peerConnection.createDataChannel('fileTransfer');\r\n    setDataChannel(channel);\r\n\r\n    channel.onopen = () => setStatus('Data channel is open.');\r\n    channel.onclose = () => setStatus('Data channel is closed.');\r\n\r\n    peerConnection.createOffer().then((offer) => {\r\n      peerConnection.setLocalDescription(offer);\r\n      socket.emit('offer', offer);\r\n      setIsOfferSent(true);\r\n      setStatus('Offer sent!');\r\n    });\r\n  };\r\n\r\n  const handleReceiveFile = () => {\r\n    if (receivedFileChunks.length === 0) return setStatus('No file chunks received.');\r\n\r\n    const receivedBlob = new Blob(receivedFileChunks, { type: fileMetadata?.type });\r\n    const link = document.createElement('a');\r\n    link.href = URL.createObjectURL(receivedBlob);\r\n    link.download = fileMetadata?.name || 'downloaded_file';\r\n    link.click();\r\n\r\n    setReceivedFileChunks([]);\r\n    setStatus('File downloaded.');\r\n  };\r\n\r\n  return (\r\n    <div className=\"file-share-container\">\r\n      <h1>File Sharing App</h1>\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      <button onClick={sendFile}>Send File</button>\r\n      <button onClick={createOffer}>Create Offer</button>\r\n      <button onClick={handleReceiveFile}>Download File</button>\r\n      <p>{status}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileShare;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}