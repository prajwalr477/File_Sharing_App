{"ast":null,"code":"var _jsxFileName = \"F:\\\\projects\\\\File-Share2\\\\client\\\\src\\\\FileShare\\\\FileShare.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport './FileShare.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst serverURL = process.env.NODE_ENV === 'production' ? window.location.origin // Use the deployed website's origin in production\n: 'http://localhost:5000'; // Localhost for development\nconst socket = io(serverURL);\nconst FileShare = ({\n  addNotification\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [username, setUsername] = useState('');\n  const [targetUser, setTargetUser] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [file, setFile] = useState(null);\n  const [status, setStatus] = useState('');\n  const [dataChannel, setDataChannel] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(new RTCPeerConnection());\n  const [receivedFileChunks, setReceivedFileChunks] = useState([]);\n  const [fileMetadata, setFileMetadata] = useState(null);\n  const [showConnectionPopup, setShowConnectionPopup] = useState(false);\n  const [connectionRequestSender, setConnectionRequestSender] = useState('');\n  const CHUNK_SIZE = 16384;\n  _s(useEffect(_s(() => {\n    _s();\n    socket.on('connect', () => {\n      console.log('Connected to server.');\n      updateStatus('Connected to server.');\n    });\n    useEffect(() => {\n      socket.onAny((event, ...args) => {\n        console.log(`Received event: ${event}`, args);\n      });\n\n      // Existing event listeners\n      socket.on('test-event', data => {\n        console.log('Test event received from server:', data);\n      });\n      socket.on('user-registered', data => {\n        console.log('User registration response:', data);\n      });\n      socket.on('connection-request', ({\n        fromUsername\n      }) => {\n        console.log(`Connection request received from ${fromUsername}`);\n        setConnectionRequestSender(fromUsername);\n        setShowConnectionPopup(true);\n      });\n      return () => {\n        socket.offAny(); // Remove listeners when component unmounts\n      };\n    }, []);\n    socket.on('connection-request', ({\n      fromUsername\n    }) => {\n      console.log(`Connection request received from ${fromUsername}`);\n      setConnectionRequestSender(fromUsername);\n      setShowConnectionPopup(true);\n      updateStatus(`Connection request received from ${fromUsername}.`);\n    });\n    socket.on('new-notification', ({\n      sender,\n      message\n    }) => {\n      console.log(`Notification received: ${message} (from ${sender})`);\n      updateStatus(`Notification from ${sender}: ${message}`);\n    });\n    socket.on('connection-approved', ({\n      message\n    }) => {\n      console.log(message);\n      updateStatus(message);\n      setIsConnected(true);\n    });\n    socket.on('connection-denied', ({\n      message\n    }) => {\n      console.log(message);\n      updateStatus(message);\n    });\n    socket.on('startDataChannel', () => {\n      console.log('Data channel established. Ready for file transfer!');\n      updateStatus('Data channel established. Ready for file transfer!');\n      setIsConnected(true);\n      setShowConnectionPopup(false);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('connection-request');\n      socket.off('new-notification');\n      socket.off('connection-approved');\n      socket.off('connection-denied');\n      socket.off('startDataChannel');\n    };\n  }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), []), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const updateStatus = message => {\n    setStatus(message);\n    if (addNotification) {\n      addNotification(message); // Send the status update to notifications\n    }\n  };\n  const handleUsernameSubmit = async () => {\n    console.log(`Registering user: ${username}`);\n    const response = await fetch(`${serverURL}/validate-user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username\n      })\n    });\n    const result = await response.json();\n    if (result.message) {\n      console.log(`User validated: ${username}`);\n      socket.emit('register-user', username);\n      updateStatus('User registered successfully.');\n    } else {\n      console.error(`Validation failed: ${result.error || 'Unknown error'}`);\n      updateStatus(result.error || 'Failed to validate user.');\n    }\n  };\n  const handleConnectionRequest = () => {\n    if (targetUser.trim() === '') {\n      console.warn('Target username cannot be empty.');\n      updateStatus('Target username cannot be empty.');\n      return;\n    }\n    console.log(`Sending connection request from ${username} to ${targetUser}`);\n    socket.emit('connection-request', {\n      toUsername: targetUser,\n      fromUsername: username\n    });\n    updateStatus(`Connection request sent to ${targetUser}.`);\n  };\n  const createOffer = async () => {\n    if (!file) {\n      console.warn('No file selected for sharing.');\n      updateStatus('Please select a file to share.');\n      return;\n    }\n    console.log('Creating data channel and offer for file transfer.');\n    const channel = peerConnection.createDataChannel('fileTransfer');\n    setDataChannel(channel);\n    const offer = await peerConnection.createOffer();\n    await peerConnection.setLocalDescription(offer);\n    socket.emit('offer', {\n      offer,\n      toUsername: targetUser\n    });\n    updateStatus('Offer sent to initiate file transfer.');\n  };\n  const acceptConnection = () => {\n    console.log(`Accepting connection request from ${connectionRequestSender}`);\n    socket.emit('connection-response', {\n      toUsername: connectionRequestSender,\n      accepted: true\n    });\n    updateStatus('Connection request accepted.');\n    setShowConnectionPopup(false);\n  };\n  const rejectConnection = () => {\n    console.log(`Rejecting connection request from ${connectionRequestSender}`);\n    socket.emit('connection-response', {\n      toUsername: connectionRequestSender,\n      accepted: false\n    });\n    updateStatus('Connection request rejected.');\n    setShowConnectionPopup(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-share-container\",\n    children: [!isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"username-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUsernameSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"File Share App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter target username\",\n          value: targetUser,\n          onChange: e => setTargetUser(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleConnectionRequest,\n          children: \"Send Connection Request\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setFile(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createOffer,\n          children: \"Send File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true), showConnectionPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [connectionRequestSender, \" wants to connect.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: acceptConnection,\n        children: \"Accept\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: rejectConnection,\n        children: \"Reject\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s2(FileShare, \"+hJBfU8UQu6PvkouJqqBQb/4ZlI=\");\n_c = FileShare;\nexport default FileShare;\nvar _c;\n$RefreshReg$(_c, \"FileShare\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","Fragment","_Fragment","serverURL","process","env","NODE_ENV","window","location","origin","socket","FileShare","addNotification","_s2","_s","$RefreshSig$","username","setUsername","targetUser","setTargetUser","isConnected","setIsConnected","file","setFile","status","setStatus","dataChannel","setDataChannel","peerConnection","setPeerConnection","RTCPeerConnection","receivedFileChunks","setReceivedFileChunks","fileMetadata","setFileMetadata","showConnectionPopup","setShowConnectionPopup","connectionRequestSender","setConnectionRequestSender","CHUNK_SIZE","on","console","log","updateStatus","onAny","event","args","data","fromUsername","offAny","sender","message","off","handleUsernameSubmit","response","fetch","method","headers","body","JSON","stringify","result","json","emit","error","handleConnectionRequest","trim","warn","toUsername","createOffer","channel","createDataChannel","offer","setLocalDescription","acceptConnection","accepted","rejectConnection","className","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","files","_c","$RefreshReg$"],"sources":["F:/projects/File-Share2/client/src/FileShare/FileShare.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport './FileShare.css';\r\n\r\nconst serverURL =\r\n  process.env.NODE_ENV === 'production'\r\n    ? window.location.origin // Use the deployed website's origin in production\r\n    : 'http://localhost:5000'; // Localhost for development\r\nconst socket = io(serverURL);\r\n\r\nconst FileShare = ({ addNotification }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [targetUser, setTargetUser] = useState('');\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [file, setFile] = useState(null);\r\n  const [status, setStatus] = useState('');\r\n  const [dataChannel, setDataChannel] = useState(null);\r\n  const [peerConnection, setPeerConnection] = useState(new RTCPeerConnection());\r\n  const [receivedFileChunks, setReceivedFileChunks] = useState([]);\r\n  const [fileMetadata, setFileMetadata] = useState(null);\r\n  const [showConnectionPopup, setShowConnectionPopup] = useState(false);\r\n  const [connectionRequestSender, setConnectionRequestSender] = useState('');\r\n  const CHUNK_SIZE = 16384;\r\n\r\n  useEffect(() => {\r\n    socket.on('connect', () => {\r\n      console.log('Connected to server.');\r\n      updateStatus('Connected to server.');\r\n    });\r\n\r\n    useEffect(() => {\r\n      socket.onAny((event, ...args) => {\r\n        console.log(`Received event: ${event}`, args);\r\n      });\r\n    \r\n      // Existing event listeners\r\n      socket.on('test-event', (data) => {\r\n        console.log('Test event received from server:', data);\r\n      });\r\n    \r\n      socket.on('user-registered', (data) => {\r\n        console.log('User registration response:', data);\r\n      });\r\n    \r\n      socket.on('connection-request', ({ fromUsername }) => {\r\n        console.log(`Connection request received from ${fromUsername}`);\r\n        setConnectionRequestSender(fromUsername);\r\n        setShowConnectionPopup(true);\r\n      });\r\n    \r\n      return () => {\r\n        socket.offAny(); // Remove listeners when component unmounts\r\n      };\r\n    }, []);\r\n\r\n    socket.on('connection-request', ({ fromUsername }) => {\r\n      console.log(`Connection request received from ${fromUsername}`);\r\n      setConnectionRequestSender(fromUsername);\r\n      setShowConnectionPopup(true);\r\n      updateStatus(`Connection request received from ${fromUsername}.`);\r\n    });\r\n\r\n    socket.on('new-notification', ({ sender, message }) => {\r\n      console.log(`Notification received: ${message} (from ${sender})`);\r\n      updateStatus(`Notification from ${sender}: ${message}`);\r\n    });\r\n\r\n    socket.on('connection-approved', ({ message }) => {\r\n      console.log(message);\r\n      updateStatus(message);\r\n      setIsConnected(true);\r\n    });\r\n\r\n    socket.on('connection-denied', ({ message }) => {\r\n      console.log(message);\r\n      updateStatus(message);\r\n    });\r\n\r\n    socket.on('startDataChannel', () => {\r\n      console.log('Data channel established. Ready for file transfer!');\r\n      updateStatus('Data channel established. Ready for file transfer!');\r\n      setIsConnected(true);\r\n      setShowConnectionPopup(false);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('connection-request');\r\n      socket.off('new-notification');\r\n      socket.off('connection-approved');\r\n      socket.off('connection-denied');\r\n      socket.off('startDataChannel');\r\n    };\r\n  }, []);\r\n\r\n  const updateStatus = (message) => {\r\n    setStatus(message);\r\n    if (addNotification) {\r\n      addNotification(message); // Send the status update to notifications\r\n    }\r\n  };\r\n\r\n  const handleUsernameSubmit = async () => {\r\n    console.log(`Registering user: ${username}`);\r\n    const response = await fetch(`${serverURL}/validate-user`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username }),\r\n    });\r\n    const result = await response.json();\r\n\r\n    if (result.message) {\r\n      console.log(`User validated: ${username}`);\r\n      socket.emit('register-user', username);\r\n      updateStatus('User registered successfully.');\r\n    } else {\r\n      console.error(`Validation failed: ${result.error || 'Unknown error'}`);\r\n      updateStatus(result.error || 'Failed to validate user.');\r\n    }\r\n  };\r\n\r\n  const handleConnectionRequest = () => {\r\n    if (targetUser.trim() === '') {\r\n      console.warn('Target username cannot be empty.');\r\n      updateStatus('Target username cannot be empty.');\r\n      return;\r\n    }\r\n    console.log(`Sending connection request from ${username} to ${targetUser}`);\r\n    socket.emit('connection-request', {\r\n      toUsername: targetUser,\r\n      fromUsername: username,\r\n    });\r\n    updateStatus(`Connection request sent to ${targetUser}.`);\r\n  };\r\n\r\n  const createOffer = async () => {\r\n    if (!file) {\r\n      console.warn('No file selected for sharing.');\r\n      updateStatus('Please select a file to share.');\r\n      return;\r\n    }\r\n\r\n    console.log('Creating data channel and offer for file transfer.');\r\n    const channel = peerConnection.createDataChannel('fileTransfer');\r\n    setDataChannel(channel);\r\n\r\n    const offer = await peerConnection.createOffer();\r\n    await peerConnection.setLocalDescription(offer);\r\n\r\n    socket.emit('offer', { offer, toUsername: targetUser });\r\n    updateStatus('Offer sent to initiate file transfer.');\r\n  };\r\n\r\n  const acceptConnection = () => {\r\n    console.log(`Accepting connection request from ${connectionRequestSender}`);\r\n    socket.emit('connection-response', {\r\n      toUsername: connectionRequestSender,\r\n      accepted: true,\r\n    });\r\n    updateStatus('Connection request accepted.');\r\n    setShowConnectionPopup(false);\r\n  };\r\n\r\n  const rejectConnection = () => {\r\n    console.log(`Rejecting connection request from ${connectionRequestSender}`);\r\n    socket.emit('connection-response', {\r\n      toUsername: connectionRequestSender,\r\n      accepted: false,\r\n    });\r\n    updateStatus('Connection request rejected.');\r\n    setShowConnectionPopup(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"file-share-container\">\r\n      {!isConnected ? (\r\n        <div className=\"username-modal\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n          <button onClick={handleUsernameSubmit}>Submit</button>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h1>File Share App</h1>\r\n          <div className=\"file-input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter target username\"\r\n              value={targetUser}\r\n              onChange={(e) => setTargetUser(e.target.value)}\r\n            />\r\n            <button onClick={handleConnectionRequest}>Send Connection Request</button>\r\n          </div>\r\n          <div className=\"file-input\">\r\n            <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\r\n            <button onClick={createOffer}>Send File</button>\r\n          </div>\r\n          {status && <p className=\"status-message\">{status}</p>}\r\n        </>\r\n      )}\r\n\r\n      {showConnectionPopup && (\r\n        <div className=\"connection-popup\">\r\n          <p>{connectionRequestSender} wants to connect.</p>\r\n          <button onClick={acceptConnection}>Accept</button>\r\n          <button onClick={rejectConnection}>Reject</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileShare;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}