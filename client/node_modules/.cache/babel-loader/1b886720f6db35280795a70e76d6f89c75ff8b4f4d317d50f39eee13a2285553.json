{"ast":null,"code":"var _jsxFileName = \"F:\\\\projects\\\\File-Share2\\\\client\\\\src\\\\FileShare\\\\Receiver.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport download from \"downloadjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReceiverApp = () => {\n  _s();\n  const [roomID, setRoomID] = useState(\"\");\n  const [activeScreen, setActiveScreen] = useState(\"join-screen\");\n  const [fileShare, setFileShare] = useState({\n    metadata: null,\n    transmitted: 0,\n    buffer: null,\n    progress: 0\n  });\n  const socket = useRef(null);\n  useEffect(() => {\n    socket.current = io(\"http://localhost:5000\");\n    socket.current.on(\"file-meta\", metadata => {\n      if (!(metadata !== null && metadata !== void 0 && metadata.total_buffer_size) || !metadata.filename) return;\n      setFileShare({\n        metadata,\n        transmitted: 0,\n        buffer: new Uint8Array(metadata.total_buffer_size),\n        progress: 0\n      });\n      socket.current.emit(\"fs-start\", {\n        uid: roomID\n      });\n    });\n    socket.current.on(\"file-raw\", ({\n      buffer\n    }) => {\n      setFileShare(prev => {\n        if (!prev.metadata) {\n          console.error(\"Metadata is missing!\");\n          return prev;\n        }\n        const start = prev.transmitted;\n        const end = start + buffer.byteLength;\n\n        // Ensure we don't exceed the buffer's total size\n        if (end > prev.metadata.total_buffer_size) {\n          console.error(`Buffer overflow! Expected max: ${prev.metadata.total_buffer_size}, Received: ${end}`);\n          return prev; // Prevent overwriting beyond bounds\n        }\n        const updatedBuffer = new Uint8Array(prev.buffer); // Create a new copy of the buffer\n        updatedBuffer.set(new Uint8Array(buffer), start); // Safely set the chunk data\n\n        const transmitted = end;\n        const progress = Math.trunc(transmitted / prev.metadata.total_buffer_size * 100);\n        if (transmitted >= prev.metadata.total_buffer_size) {\n          console.log(\"File received completely. Downloading...\");\n          const blob = new Blob([updatedBuffer]);\n          download(blob, prev.metadata.filename);\n          return {\n            metadata: null,\n            transmitted: 0,\n            buffer: null,\n            progress: 0\n          };\n        }\n        return {\n          ...prev,\n          transmitted,\n          buffer: updatedBuffer,\n          progress\n        };\n      });\n\n      // Request the next chunk\n      socket.current.emit(\"fs-start\", {\n        uid: roomID\n      });\n    });\n    return () => {\n      socket.current.disconnect();\n    };\n  }, [roomID]);\n  const handleConnect = () => {\n    if (!roomID.trim()) return;\n    socket.current.emit(\"receiver-join\", {\n      uid: roomID\n    });\n    setActiveScreen(\"fs-screen\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [activeScreen === \"join-screen\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen join-screen active\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Join a Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Room ID\",\n        value: roomID,\n        onChange: e => setRoomID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConnect,\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), activeScreen === \"fs-screen\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen fs-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Receiving File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), fileShare.metadata && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: fileShare.metadata.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Progress: \", fileShare.progress, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(ReceiverApp, \"AJ4Qo0meY6PofJbxlHIhWJCAjwo=\");\n_c = ReceiverApp;\nexport default ReceiverApp;\nvar _c;\n$RefreshReg$(_c, \"ReceiverApp\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","download","jsxDEV","_jsxDEV","ReceiverApp","_s","roomID","setRoomID","activeScreen","setActiveScreen","fileShare","setFileShare","metadata","transmitted","buffer","progress","socket","current","on","total_buffer_size","filename","Uint8Array","emit","uid","prev","console","error","start","end","byteLength","updatedBuffer","set","Math","trunc","log","blob","Blob","disconnect","handleConnect","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["F:/projects/File-Share2/client/src/FileShare/Receiver.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport download from \"downloadjs\";\r\n\r\nconst ReceiverApp = () => {\r\n  const [roomID, setRoomID] = useState(\"\");\r\n  const [activeScreen, setActiveScreen] = useState(\"join-screen\");\r\n  const [fileShare, setFileShare] = useState({\r\n    metadata: null,\r\n    transmitted: 0,\r\n    buffer: null,\r\n    progress: 0,\r\n  });\r\n\r\n  const socket = useRef(null);\r\n\r\n  useEffect(() => {\r\n    socket.current = io(\"http://localhost:5000\");\r\n\r\n    socket.current.on(\"file-meta\", (metadata) => {\r\n      if (!metadata?.total_buffer_size || !metadata.filename) return;\r\n\r\n      setFileShare({\r\n        metadata,\r\n        transmitted: 0,\r\n        buffer: new Uint8Array(metadata.total_buffer_size),\r\n        progress: 0,\r\n      });\r\n\r\n      socket.current.emit(\"fs-start\", { uid: roomID });\r\n    });\r\n\r\n    socket.current.on(\"file-raw\", ({ buffer }) => {\r\n      setFileShare((prev) => {\r\n        if (!prev.metadata) {\r\n          console.error(\"Metadata is missing!\");\r\n          return prev;\r\n        }\r\n    \r\n        const start = prev.transmitted;\r\n        const end = start + buffer.byteLength;\r\n    \r\n        // Ensure we don't exceed the buffer's total size\r\n        if (end > prev.metadata.total_buffer_size) {\r\n          console.error(\r\n            `Buffer overflow! Expected max: ${prev.metadata.total_buffer_size}, Received: ${end}`\r\n          );\r\n          return prev; // Prevent overwriting beyond bounds\r\n        }\r\n    \r\n        const updatedBuffer = new Uint8Array(prev.buffer); // Create a new copy of the buffer\r\n        updatedBuffer.set(new Uint8Array(buffer), start); // Safely set the chunk data\r\n    \r\n        const transmitted = end;\r\n        const progress = Math.trunc(\r\n          (transmitted / prev.metadata.total_buffer_size) * 100\r\n        );\r\n    \r\n        if (transmitted >= prev.metadata.total_buffer_size) {\r\n          console.log(\"File received completely. Downloading...\");\r\n          const blob = new Blob([updatedBuffer]);\r\n          download(blob, prev.metadata.filename);\r\n          return { metadata: null, transmitted: 0, buffer: null, progress: 0 };\r\n        }\r\n    \r\n        return {\r\n          ...prev,\r\n          transmitted,\r\n          buffer: updatedBuffer,\r\n          progress,\r\n        };\r\n      });\r\n    \r\n      // Request the next chunk\r\n      socket.current.emit(\"fs-start\", { uid: roomID });\r\n    });\r\n\r\n    return () => {\r\n      socket.current.disconnect();\r\n    };\r\n  }, [roomID]);\r\n\r\n  const handleConnect = () => {\r\n    if (!roomID.trim()) return;\r\n    socket.current.emit(\"receiver-join\", { uid: roomID });\r\n    setActiveScreen(\"fs-screen\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {activeScreen === \"join-screen\" && (\r\n        <div className=\"screen join-screen active\">\r\n          <h2>Join a Room</h2>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Room ID\"\r\n            value={roomID}\r\n            onChange={(e) => setRoomID(e.target.value)}\r\n          />\r\n          <button onClick={handleConnect}>Join</button>\r\n        </div>\r\n      )}\r\n      {activeScreen === \"fs-screen\" && (\r\n        <div className=\"screen fs-screen\">\r\n          <h2>Receiving File</h2>\r\n          {fileShare.metadata && (\r\n            <div>\r\n              <p>{fileShare.metadata.filename}</p>\r\n              <p>Progress: {fileShare.progress}%</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReceiverApp;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,aAAa,CAAC;EAC/D,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC;IACzCe,QAAQ,EAAE,IAAI;IACdC,WAAW,EAAE,CAAC;IACdC,MAAM,EAAE,IAAI;IACZC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAE3BC,SAAS,CAAC,MAAM;IACdiB,MAAM,CAACC,OAAO,GAAGjB,EAAE,CAAC,uBAAuB,CAAC;IAE5CgB,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,WAAW,EAAGN,QAAQ,IAAK;MAC3C,IAAI,EAACA,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEO,iBAAiB,KAAI,CAACP,QAAQ,CAACQ,QAAQ,EAAE;MAExDT,YAAY,CAAC;QACXC,QAAQ;QACRC,WAAW,EAAE,CAAC;QACdC,MAAM,EAAE,IAAIO,UAAU,CAACT,QAAQ,CAACO,iBAAiB,CAAC;QAClDJ,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEFC,MAAM,CAACC,OAAO,CAACK,IAAI,CAAC,UAAU,EAAE;QAAEC,GAAG,EAAEjB;MAAO,CAAC,CAAC;IAClD,CAAC,CAAC;IAEFU,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,UAAU,EAAE,CAAC;MAAEJ;IAAO,CAAC,KAAK;MAC5CH,YAAY,CAAEa,IAAI,IAAK;QACrB,IAAI,CAACA,IAAI,CAACZ,QAAQ,EAAE;UAClBa,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;UACrC,OAAOF,IAAI;QACb;QAEA,MAAMG,KAAK,GAAGH,IAAI,CAACX,WAAW;QAC9B,MAAMe,GAAG,GAAGD,KAAK,GAAGb,MAAM,CAACe,UAAU;;QAErC;QACA,IAAID,GAAG,GAAGJ,IAAI,CAACZ,QAAQ,CAACO,iBAAiB,EAAE;UACzCM,OAAO,CAACC,KAAK,CACX,kCAAkCF,IAAI,CAACZ,QAAQ,CAACO,iBAAiB,eAAeS,GAAG,EACrF,CAAC;UACD,OAAOJ,IAAI,CAAC,CAAC;QACf;QAEA,MAAMM,aAAa,GAAG,IAAIT,UAAU,CAACG,IAAI,CAACV,MAAM,CAAC,CAAC,CAAC;QACnDgB,aAAa,CAACC,GAAG,CAAC,IAAIV,UAAU,CAACP,MAAM,CAAC,EAAEa,KAAK,CAAC,CAAC,CAAC;;QAElD,MAAMd,WAAW,GAAGe,GAAG;QACvB,MAAMb,QAAQ,GAAGiB,IAAI,CAACC,KAAK,CACxBpB,WAAW,GAAGW,IAAI,CAACZ,QAAQ,CAACO,iBAAiB,GAAI,GACpD,CAAC;QAED,IAAIN,WAAW,IAAIW,IAAI,CAACZ,QAAQ,CAACO,iBAAiB,EAAE;UAClDM,OAAO,CAACS,GAAG,CAAC,0CAA0C,CAAC;UACvD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACN,aAAa,CAAC,CAAC;UACtC7B,QAAQ,CAACkC,IAAI,EAAEX,IAAI,CAACZ,QAAQ,CAACQ,QAAQ,CAAC;UACtC,OAAO;YAAER,QAAQ,EAAE,IAAI;YAAEC,WAAW,EAAE,CAAC;YAAEC,MAAM,EAAE,IAAI;YAAEC,QAAQ,EAAE;UAAE,CAAC;QACtE;QAEA,OAAO;UACL,GAAGS,IAAI;UACPX,WAAW;UACXC,MAAM,EAAEgB,aAAa;UACrBf;QACF,CAAC;MACH,CAAC,CAAC;;MAEF;MACAC,MAAM,CAACC,OAAO,CAACK,IAAI,CAAC,UAAU,EAAE;QAAEC,GAAG,EAAEjB;MAAO,CAAC,CAAC;IAClD,CAAC,CAAC;IAEF,OAAO,MAAM;MACXU,MAAM,CAACC,OAAO,CAACoB,UAAU,CAAC,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,CAAC/B,MAAM,CAAC,CAAC;EAEZ,MAAMgC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAAChC,MAAM,CAACiC,IAAI,CAAC,CAAC,EAAE;IACpBvB,MAAM,CAACC,OAAO,CAACK,IAAI,CAAC,eAAe,EAAE;MAAEC,GAAG,EAAEjB;IAAO,CAAC,CAAC;IACrDG,eAAe,CAAC,WAAW,CAAC;EAC9B,CAAC;EAED,oBACEN,OAAA;IAAKqC,SAAS,EAAC,KAAK;IAAAC,QAAA,GACjBjC,YAAY,KAAK,aAAa,iBAC7BL,OAAA;MAAKqC,SAAS,EAAC,2BAA2B;MAAAC,QAAA,gBACxCtC,OAAA;QAAAsC,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB1C,OAAA;QACE2C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,SAAS;QACrBC,KAAK,EAAE1C,MAAO;QACd2C,QAAQ,EAAGC,CAAC,IAAK3C,SAAS,CAAC2C,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACF1C,OAAA;QAAQiD,OAAO,EAAEd,aAAc;QAAAG,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CACN,EACArC,YAAY,KAAK,WAAW,iBAC3BL,OAAA;MAAKqC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BtC,OAAA;QAAAsC,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACtBnC,SAAS,CAACE,QAAQ,iBACjBT,OAAA;QAAAsC,QAAA,gBACEtC,OAAA;UAAAsC,QAAA,EAAI/B,SAAS,CAACE,QAAQ,CAACQ;QAAQ;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpC1C,OAAA;UAAAsC,QAAA,GAAG,YAAU,EAAC/B,SAAS,CAACK,QAAQ,EAAC,GAAC;QAAA;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxC,EAAA,CA/GID,WAAW;AAAAiD,EAAA,GAAXjD,WAAW;AAiHjB,eAAeA,WAAW;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}